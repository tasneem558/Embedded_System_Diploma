
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000ccc  08000ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d04  08000d04  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d04  08000d04  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d04  08000d04  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d04  08000d04  00010d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d08  08000d08  00010d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000d2c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000d2c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030b2  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007f0  00000000  00000000  000230fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000720  00000000  00000000  000238eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000148  00000000  00000000  00024010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fd5  00000000  00000000  00024258  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c36  00000000  00000000  0002622d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007b9e  00000000  00000000  00027e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fa01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003c8  00000000  00000000  0002fa7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cb4 	.word	0x08000cb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000cb4 	.word	0x08000cb4

08000170 <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable clock GPOIA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//enable clock GPOIB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	//	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	//	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
	//	MCAL_GPIO_Init(GPIOA,&PinCfg);

	//PB1 output push-pull mode:
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc96 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc8a 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc7e 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc72 	bl	8000ae2 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fc66 	bl	8000ae2 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fc5a 	bl	8000ae2 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fc4e 	bl	8000ae2 <MCAL_GPIO_Init>



}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <wait_ms>:
void wait_ms(int x)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e00c      	b.n	800027c <wait_ms+0x28>
	{
		for(j=0;j<1000;j++);
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <wait_ms+0x1a>
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000274:	d3f8      	bcc.n	8000268 <wait_ms+0x14>
	for(i=0;i<x;i++)
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	429a      	cmp	r2, r3
 8000282:	d3ee      	bcc.n	8000262 <wait_ms+0xe>
	}
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
	...

08000290 <main>:
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
	clock_init();
 8000296:	f7ff ff6b 	bl	8000170 <clock_init>
	LCD_INIT();
 800029a:	f000 faa3 	bl	80007e4 <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_string("hello tasneem");
 800029e:	482e      	ldr	r0, [pc, #184]	; (8000358 <main+0xc8>)
 80002a0:	f000 fba0 	bl	80009e4 <LCD_WRITE_string>
	wait_ms(50);
 80002a4:	2032      	movs	r0, #50	; 0x32
 80002a6:	f7ff ffd5 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 80002aa:	f000 fa93 	bl	80007d4 <LCD_clear_screen>
	GPIO_init();
 80002ae:	f7ff ff73 	bl	8000198 <GPIO_init>
	unsigned char LCD_DISPLAY [] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002b2:	4a2a      	ldr	r2, [pc, #168]	; (800035c <main+0xcc>)
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ba:	c303      	stmia	r3!, {r0, r1}
 80002bc:	801a      	strh	r2, [r3, #0]
 80002be:	3302      	adds	r3, #2
 80002c0:	0c12      	lsrs	r2, r2, #16
 80002c2:	701a      	strb	r2, [r3, #0]
	unsigned char Seg_DISPLAY [] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002c4:	4a26      	ldr	r2, [pc, #152]	; (8000360 <main+0xd0>)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ca:	c303      	stmia	r3!, {r0, r1}
 80002cc:	801a      	strh	r2, [r3, #0]
 80002ce:	3302      	adds	r3, #2
 80002d0:	0c12      	lsrs	r2, r2, #16
 80002d2:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	77fb      	strb	r3, [r7, #31]
 80002d8:	e01b      	b.n	8000312 <main+0x82>
	{
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 80002da:	7ffb      	ldrb	r3, [r7, #31]
 80002dc:	f107 0220 	add.w	r2, r7, #32
 80002e0:	4413      	add	r3, r2
 80002e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fb54 	bl	8000994 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, Seg_DISPLAY[i] << 9); /* write data on to the LED port */
 80002ec:	7ffb      	ldrb	r3, [r7, #31]
 80002ee:	f107 0220 	add.w	r2, r7, #32
 80002f2:	4413      	add	r3, r2
 80002f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	025b      	lsls	r3, r3, #9
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	4818      	ldr	r0, [pc, #96]	; (8000364 <main+0xd4>)
 8000302:	f000 fca5 	bl	8000c50 <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f7ff ffa4 	bl	8000254 <wait_ms>
	for (unsigned char i = 0; i < 11; i++)
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	3301      	adds	r3, #1
 8000310:	77fb      	strb	r3, [r7, #31]
 8000312:	7ffb      	ldrb	r3, [r7, #31]
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d9e0      	bls.n	80002da <main+0x4a>
		/* wait for 1 second */
	}
	LCD_clear_screen();
 8000318:	f000 fa5c 	bl	80007d4 <LCD_clear_screen>
	KEYBAD_INIT();
 800031c:	f000 f850 	bl	80003c0 <KEYBAD_INIT>
	LCD_WRITE_string("Keypad is ready");
 8000320:	4811      	ldr	r0, [pc, #68]	; (8000368 <main+0xd8>)
 8000322:	f000 fb5f 	bl	80009e4 <LCD_WRITE_string>
	wait_ms(50);
 8000326:	2032      	movs	r0, #50	; 0x32
 8000328:	f7ff ff94 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 800032c:	f000 fa52 	bl	80007d4 <LCD_clear_screen>
	while(1)
	{
		key_pressed = KEYPAD_GETCHAR();
 8000330:	f000 f8bc 	bl	80004ac <KEYPAD_GETCHAR>
 8000334:	4603      	mov	r3, r0
 8000336:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed)
 8000338:	7fbb      	ldrb	r3, [r7, #30]
 800033a:	2b3f      	cmp	r3, #63	; 0x3f
 800033c:	d002      	beq.n	8000344 <main+0xb4>
 800033e:	2b41      	cmp	r3, #65	; 0x41
 8000340:	d008      	beq.n	8000354 <main+0xc4>
 8000342:	e002      	b.n	800034a <main+0xba>
		{
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000344:	f000 fa46 	bl	80007d4 <LCD_clear_screen>
			break;
 8000348:	e005      	b.n	8000356 <main+0xc6>
		default:
			LCD_WRITE_CHAR(key_pressed);
 800034a:	7fbb      	ldrb	r3, [r7, #30]
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fb21 	bl	8000994 <LCD_WRITE_CHAR>
			break;
 8000352:	e000      	b.n	8000356 <main+0xc6>
			break;
 8000354:	bf00      	nop
		key_pressed = KEYPAD_GETCHAR();
 8000356:	e7eb      	b.n	8000330 <main+0xa0>
 8000358:	08000ccc 	.word	0x08000ccc
 800035c:	08000cec 	.word	0x08000cec
 8000360:	08000cf8 	.word	0x08000cf8
 8000364:	40010c00 	.word	0x40010c00
 8000368:	08000cdc 	.word	0x08000cdc

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 fc67 	bl	8000c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff77 	bl	8000290 <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003b0:	08000d0c 	.word	0x08000d0c
  ldr r2, =_sbss
 80003b4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003b8:	20000040 	.word	0x20000040

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <KEYBAD_INIT>:
int keypad_C[4] = {C0,C1,C2,C3};//columns of the keypad



void KEYBAD_INIT()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber=R0;
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80003d6:	4933      	ldr	r1, [pc, #204]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003d8:	4833      	ldr	r0, [pc, #204]	; (80004a8 <KEYBAD_INIT+0xe8>)
 80003da:	f000 fb82 	bl	8000ae2 <MCAL_GPIO_Init>
	//	DATADir_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
	//	DATADir_KEYPAD_PORT |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
	//	KEYPAD_PORT = 0xFF;

	PinCfg.GPIO_PinNumber=R1;
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80003e4:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80003ea:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80003f0:	492c      	ldr	r1, [pc, #176]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003f2:	482d      	ldr	r0, [pc, #180]	; (80004a8 <KEYBAD_INIT+0xe8>)
 80003f4:	f000 fb75 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=R2;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <KEYBAD_INIT+0xe4>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000400:	2204      	movs	r2, #4
 8000402:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000406:	2201      	movs	r2, #1
 8000408:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 800040a:	4926      	ldr	r1, [pc, #152]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800040c:	4826      	ldr	r0, [pc, #152]	; (80004a8 <KEYBAD_INIT+0xe8>)
 800040e:	f000 fb68 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=R3;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000414:	2210      	movs	r2, #16
 8000416:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000418:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800041a:	2204      	movs	r2, #4
 800041c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000420:	2201      	movs	r2, #1
 8000422:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000424:	491f      	ldr	r1, [pc, #124]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <KEYBAD_INIT+0xe8>)
 8000428:	f000 fb5b 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C0;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800042e:	2220      	movs	r2, #32
 8000430:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000434:	2204      	movs	r2, #4
 8000436:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800043a:	2201      	movs	r2, #1
 800043c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 800043e:	4919      	ldr	r1, [pc, #100]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000440:	4819      	ldr	r0, [pc, #100]	; (80004a8 <KEYBAD_INIT+0xe8>)
 8000442:	f000 fb4e 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C1;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000448:	2240      	movs	r2, #64	; 0x40
 800044a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800044e:	2204      	movs	r2, #4
 8000450:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000454:	2201      	movs	r2, #1
 8000456:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000458:	4912      	ldr	r1, [pc, #72]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800045a:	4813      	ldr	r0, [pc, #76]	; (80004a8 <KEYBAD_INIT+0xe8>)
 800045c:	f000 fb41 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C2;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000468:	2204      	movs	r2, #4
 800046a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800046e:	2201      	movs	r2, #1
 8000470:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <KEYBAD_INIT+0xe8>)
 8000476:	f000 fb34 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C3;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800047c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000480:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000484:	2204      	movs	r2, #4
 8000486:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <KEYBAD_INIT+0xe4>)
 800048a:	2201      	movs	r2, #1
 800048c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 800048e:	4905      	ldr	r1, [pc, #20]	; (80004a4 <KEYBAD_INIT+0xe4>)
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <KEYBAD_INIT+0xe8>)
 8000492:	f000 fb26 	bl	8000ae2 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000496:	21ff      	movs	r1, #255	; 0xff
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <KEYBAD_INIT+0xe8>)
 800049a:	f000 fbd9 	bl	8000c50 <MCAL_GPIO_WritePort>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000003c 	.word	0x2000003c
 80004a8:	40010c00 	.word	0x40010c00

080004ac <KEYPAD_GETCHAR>:
char KEYPAD_GETCHAR()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	int i,j;
	for(i=0;i<4;i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e0b4      	b.n	8000622 <KEYPAD_GETCHAR+0x176>
	{
		//		KEYPAD_PORT |= ((1<<keypad_C[0]) | (keypad_C[1]) | (keypad_C[2]) | (keypad_C[3]));
		//		KEYPAD_PORT &= ~(1<<keypad_C[i]);

		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[0], GPIO_PIN_SET);
 80004b8:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <KEYPAD_GETCHAR+0x188>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	485d      	ldr	r0, [pc, #372]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 80004c4:	f000 fbad 	bl	8000c22 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[1], GPIO_PIN_SET);
 80004c8:	4b5a      	ldr	r3, [pc, #360]	; (8000634 <KEYPAD_GETCHAR+0x188>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4859      	ldr	r0, [pc, #356]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 80004d4:	f000 fba5 	bl	8000c22 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[2], GPIO_PIN_SET);
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <KEYPAD_GETCHAR+0x188>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	4855      	ldr	r0, [pc, #340]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 80004e4:	f000 fb9d 	bl	8000c22 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[3], GPIO_PIN_SET);
 80004e8:	4b52      	ldr	r3, [pc, #328]	; (8000634 <KEYPAD_GETCHAR+0x188>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	4851      	ldr	r0, [pc, #324]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 80004f4:	f000 fb95 	bl	8000c22 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[i], GPIO_PIN_RESET);
 80004f8:	4a4e      	ldr	r2, [pc, #312]	; (8000634 <KEYPAD_GETCHAR+0x188>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000500:	b29b      	uxth	r3, r3
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	484c      	ldr	r0, [pc, #304]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 8000508:	f000 fb8b 	bl	8000c22 <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e080      	b.n	8000614 <KEYPAD_GETCHAR+0x168>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_R[j]) == 0)
 8000512:	4a4a      	ldr	r2, [pc, #296]	; (800063c <KEYPAD_GETCHAR+0x190>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	4846      	ldr	r0, [pc, #280]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 8000520:	f000 fb68 	bl	8000bf4 <MCAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d171      	bne.n	800060e <KEYPAD_GETCHAR+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_R[j]) == 0);
 800052a:	bf00      	nop
 800052c:	4a43      	ldr	r2, [pc, #268]	; (800063c <KEYPAD_GETCHAR+0x190>)
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000534:	b29b      	uxth	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	483f      	ldr	r0, [pc, #252]	; (8000638 <KEYPAD_GETCHAR+0x18c>)
 800053a:	f000 fb5b 	bl	8000bf4 <MCAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f3      	beq.n	800052c <KEYPAD_GETCHAR+0x80>
				switch(i)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d861      	bhi.n	800060e <KEYPAD_GETCHAR+0x162>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <KEYPAD_GETCHAR+0xa4>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000561 	.word	0x08000561
 8000554:	08000589 	.word	0x08000589
 8000558:	080005b1 	.word	0x080005b1
 800055c:	080005d9 	.word	0x080005d9
				{
				case(0):
				  {
					if(j==0)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <KEYPAD_GETCHAR+0xbe>
						return '7';
 8000566:	2337      	movs	r3, #55	; 0x37
 8000568:	e060      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d101      	bne.n	8000574 <KEYPAD_GETCHAR+0xc8>
						return '4';
 8000570:	2334      	movs	r3, #52	; 0x34
 8000572:	e05b      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d101      	bne.n	800057e <KEYPAD_GETCHAR+0xd2>
						return '1';
 800057a:	2331      	movs	r3, #49	; 0x31
 800057c:	e056      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d13d      	bne.n	8000600 <KEYPAD_GETCHAR+0x154>
						return '!';
 8000584:	2321      	movs	r3, #33	; 0x21
 8000586:	e051      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(1):
				   {
					if(j==0)
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <KEYPAD_GETCHAR+0xe6>
						return '8';
 800058e:	2338      	movs	r3, #56	; 0x38
 8000590:	e04c      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d101      	bne.n	800059c <KEYPAD_GETCHAR+0xf0>
						return '5';
 8000598:	2335      	movs	r3, #53	; 0x35
 800059a:	e047      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d101      	bne.n	80005a6 <KEYPAD_GETCHAR+0xfa>
						return '2';
 80005a2:	2332      	movs	r3, #50	; 0x32
 80005a4:	e042      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d12b      	bne.n	8000604 <KEYPAD_GETCHAR+0x158>
						return '0';
 80005ac:	2330      	movs	r3, #48	; 0x30
 80005ae:	e03d      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(2):
				   {
					if(j==0)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <KEYPAD_GETCHAR+0x10e>
						return '9';
 80005b6:	2339      	movs	r3, #57	; 0x39
 80005b8:	e038      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <KEYPAD_GETCHAR+0x118>
						return '6';
 80005c0:	2336      	movs	r3, #54	; 0x36
 80005c2:	e033      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d101      	bne.n	80005ce <KEYPAD_GETCHAR+0x122>
						return '3';
 80005ca:	2333      	movs	r3, #51	; 0x33
 80005cc:	e02e      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d119      	bne.n	8000608 <KEYPAD_GETCHAR+0x15c>
						return '=';
 80005d4:	233d      	movs	r3, #61	; 0x3d
 80005d6:	e029      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(3):
				   {
					if(j==0)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <KEYPAD_GETCHAR+0x136>
						return '/';
 80005de:	232f      	movs	r3, #47	; 0x2f
 80005e0:	e024      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d101      	bne.n	80005ec <KEYPAD_GETCHAR+0x140>
						return '*';
 80005e8:	232a      	movs	r3, #42	; 0x2a
 80005ea:	e01f      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d101      	bne.n	80005f6 <KEYPAD_GETCHAR+0x14a>
						return '-';
 80005f2:	232d      	movs	r3, #45	; 0x2d
 80005f4:	e01a      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d107      	bne.n	800060c <KEYPAD_GETCHAR+0x160>
						return '+';
 80005fc:	232b      	movs	r3, #43	; 0x2b
 80005fe:	e015      	b.n	800062c <KEYPAD_GETCHAR+0x180>
					break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <KEYPAD_GETCHAR+0x162>
					break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <KEYPAD_GETCHAR+0x162>
					break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <KEYPAD_GETCHAR+0x162>
					break;
 800060c:	bf00      	nop
		for(j=0;j<4;j++)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b03      	cmp	r3, #3
 8000618:	f77f af7b 	ble.w	8000512 <KEYPAD_GETCHAR+0x66>
	for(i=0;i<4;i++)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	f77f af47 	ble.w	80004b8 <KEYPAD_GETCHAR+0xc>
				}
			}

		}
	}
	return 'N';
 800062a:	234e      	movs	r3, #78	; 0x4e
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000010 	.word	0x20000010
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000000 	.word	0x20000000

08000640 <wait>:
 */

#include "lcd.h"

void wait(int x)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00c      	b.n	8000668 <wait+0x28>
	{
		for(j=0;j<1000;j++);
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	e002      	b.n	800065a <wait+0x1a>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	3301      	adds	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000660:	d3f8      	bcc.n	8000654 <wait+0x14>
	for(i=0;i<x;i++)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3ee      	bcc.n	800064e <wait+0xe>
	}
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
	...

0800067c <LCD_KICK>:

void LCD_KICK(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <LCD_KICK+0x28>)
 8000688:	f000 facb 	bl	8000c22 <MCAL_GPIO_WritePin>
	//	LCD_CTRL&=~(1<ENABLE_SWITCH);
	wait(50);
 800068c:	2032      	movs	r0, #50	; 0x32
 800068e:	f7ff ffd7 	bl	8000640 <wait>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <LCD_KICK+0x28>)
 800069a:	f000 fac2 	bl	8000c22 <MCAL_GPIO_WritePin>
	//	LCD_CTRL|=(1<ENABLE_SWITCH);

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800

080006a8 <LCD_GOTO_XY>:
void LCD_GOTO_XY(int line,int position)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	if(line ==1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10d      	bne.n	80006d4 <LCD_GOTO_XY+0x2c>
	{
		if(position >=0 && position <16)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db1a      	blt.n	80006f4 <LCD_GOTO_XY+0x4c>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	dc17      	bgt.n	80006f4 <LCD_GOTO_XY+0x4c>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3b80      	subs	r3, #128	; 0x80
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f93f 	bl	8000950 <LCD_WRITE_COMMAND>
		if(position >=0 && position <32)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 80006d2:	e00f      	b.n	80006f4 <LCD_GOTO_XY+0x4c>
	else if(line==2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d10c      	bne.n	80006f4 <LCD_GOTO_XY+0x4c>
		if(position >=0 && position <32)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db09      	blt.n	80006f4 <LCD_GOTO_XY+0x4c>
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2b1f      	cmp	r3, #31
 80006e4:	dc06      	bgt.n	80006f4 <LCD_GOTO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3b40      	subs	r3, #64	; 0x40
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f92e 	bl	8000950 <LCD_WRITE_COMMAND>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <LCD_isbusy>:
void LCD_isbusy(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//
	//#ifdef FOUR_BIT_MODE
	//	DataDir_LCD_CTRL &= ~(0xFF<<DATA_SHFT); //WITH ONLY 4BITS
	//#endif

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <LCD_isbusy+0xd0>)
 8000702:	2201      	movs	r2, #1
 8000704:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <LCD_isbusy+0xd0>)
 8000708:	2201      	movs	r2, #1
 800070a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800070c:	492f      	ldr	r1, [pc, #188]	; (80007cc <LCD_isbusy+0xd0>)
 800070e:	4830      	ldr	r0, [pc, #192]	; (80007d0 <LCD_isbusy+0xd4>)
 8000710:	f000 f9e7 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <LCD_isbusy+0xd0>)
 8000716:	2202      	movs	r2, #2
 8000718:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <LCD_isbusy+0xd0>)
 800071c:	2201      	movs	r2, #1
 800071e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000720:	492a      	ldr	r1, [pc, #168]	; (80007cc <LCD_isbusy+0xd0>)
 8000722:	482b      	ldr	r0, [pc, #172]	; (80007d0 <LCD_isbusy+0xd4>)
 8000724:	f000 f9dd 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <LCD_isbusy+0xd0>)
 800072a:	2204      	movs	r2, #4
 800072c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <LCD_isbusy+0xd0>)
 8000730:	2201      	movs	r2, #1
 8000732:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000734:	4925      	ldr	r1, [pc, #148]	; (80007cc <LCD_isbusy+0xd0>)
 8000736:	4826      	ldr	r0, [pc, #152]	; (80007d0 <LCD_isbusy+0xd4>)
 8000738:	f000 f9d3 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <LCD_isbusy+0xd0>)
 800073e:	2208      	movs	r2, #8
 8000740:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <LCD_isbusy+0xd0>)
 8000744:	2201      	movs	r2, #1
 8000746:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000748:	4920      	ldr	r1, [pc, #128]	; (80007cc <LCD_isbusy+0xd0>)
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <LCD_isbusy+0xd4>)
 800074c:	f000 f9c9 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <LCD_isbusy+0xd0>)
 8000752:	2210      	movs	r2, #16
 8000754:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <LCD_isbusy+0xd0>)
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800075c:	491b      	ldr	r1, [pc, #108]	; (80007cc <LCD_isbusy+0xd0>)
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <LCD_isbusy+0xd4>)
 8000760:	f000 f9bf 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <LCD_isbusy+0xd0>)
 8000766:	2220      	movs	r2, #32
 8000768:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <LCD_isbusy+0xd0>)
 800076c:	2201      	movs	r2, #1
 800076e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <LCD_isbusy+0xd0>)
 8000772:	4817      	ldr	r0, [pc, #92]	; (80007d0 <LCD_isbusy+0xd4>)
 8000774:	f000 f9b5 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <LCD_isbusy+0xd0>)
 800077a:	2240      	movs	r2, #64	; 0x40
 800077c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <LCD_isbusy+0xd0>)
 8000780:	2201      	movs	r2, #1
 8000782:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000784:	4911      	ldr	r1, [pc, #68]	; (80007cc <LCD_isbusy+0xd0>)
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <LCD_isbusy+0xd4>)
 8000788:	f000 f9ab 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <LCD_isbusy+0xd0>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <LCD_isbusy+0xd0>)
 8000794:	2201      	movs	r2, #1
 8000796:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <LCD_isbusy+0xd0>)
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LCD_isbusy+0xd4>)
 800079c:	f000 f9a1 	bl	8000ae2 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LCD_isbusy+0xd4>)
 80007a8:	f000 fa3b 	bl	8000c22 <MCAL_GPIO_WritePin>
	//  LCD_CTRL |=(1<<RW_SWITCH); //READ MODE
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LCD_isbusy+0xd4>)
 80007b4:	f000 fa35 	bl	8000c22 <MCAL_GPIO_WritePin>
	//	LCD_CTRL&=~(1<RS_SWITCH);
	LCD_KICK();
 80007b8:	f7ff ff60 	bl	800067c <LCD_KICK>
	//	DataDir_LCD_PORT = 0XFF;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <LCD_isbusy+0xd4>)
 80007c4:	f000 fa2d 	bl	8000c22 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1<<RW_SWITCH);
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000003c 	.word	0x2000003c
 80007d0:	40010800 	.word	0x40010800

080007d4 <LCD_clear_screen>:
void LCD_clear_screen()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 f8b9 	bl	8000950 <LCD_WRITE_COMMAND>

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <LCD_INIT>:
void LCD_INIT(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	wait(25);
 80007e8:	2019      	movs	r0, #25
 80007ea:	f7ff ff29 	bl	8000640 <wait>
	LCD_isbusy();
 80007ee:	f7ff ff85 	bl	80006fc <LCD_isbusy>

	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	4853      	ldr	r0, [pc, #332]	; (8000948 <LCD_INIT+0x164>)
 80007fa:	f000 fa12 	bl	8000c22 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	4850      	ldr	r0, [pc, #320]	; (8000948 <LCD_INIT+0x164>)
 8000806:	f000 fa0c 	bl	8000c22 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	484d      	ldr	r0, [pc, #308]	; (8000948 <LCD_INIT+0x164>)
 8000812:	f000 fa06 	bl	8000c22 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1<<ENABLE_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH);

	//ENABLE_SWITCH,RS_SWITCH,RW_SWITCH floating input:
	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <LCD_INIT+0x168>)
 8000818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800081e:	4b4b      	ldr	r3, [pc, #300]	; (800094c <LCD_INIT+0x168>)
 8000820:	2201      	movs	r2, #1
 8000822:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000824:	4949      	ldr	r1, [pc, #292]	; (800094c <LCD_INIT+0x168>)
 8000826:	4848      	ldr	r0, [pc, #288]	; (8000948 <LCD_INIT+0x164>)
 8000828:	f000 f95b 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 800082c:	4b47      	ldr	r3, [pc, #284]	; (800094c <LCD_INIT+0x168>)
 800082e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000832:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000834:	4b45      	ldr	r3, [pc, #276]	; (800094c <LCD_INIT+0x168>)
 8000836:	2201      	movs	r2, #1
 8000838:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800083a:	4944      	ldr	r1, [pc, #272]	; (800094c <LCD_INIT+0x168>)
 800083c:	4842      	ldr	r0, [pc, #264]	; (8000948 <LCD_INIT+0x164>)
 800083e:	f000 f950 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <LCD_INIT+0x168>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <LCD_INIT+0x168>)
 800084c:	2201      	movs	r2, #1
 800084e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000850:	493e      	ldr	r1, [pc, #248]	; (800094c <LCD_INIT+0x168>)
 8000852:	483d      	ldr	r0, [pc, #244]	; (8000948 <LCD_INIT+0x164>)
 8000854:	f000 f945 	bl	8000ae2 <MCAL_GPIO_Init>

	wait(15);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fef1 	bl	8000640 <wait>
	//  DATA PINS OUTPUT with speed 10MHZ
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <LCD_INIT+0x168>)
 8000860:	2201      	movs	r2, #1
 8000862:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <LCD_INIT+0x168>)
 8000866:	2204      	movs	r2, #4
 8000868:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <LCD_INIT+0x168>)
 800086c:	2201      	movs	r2, #1
 800086e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000870:	4936      	ldr	r1, [pc, #216]	; (800094c <LCD_INIT+0x168>)
 8000872:	4835      	ldr	r0, [pc, #212]	; (8000948 <LCD_INIT+0x164>)
 8000874:	f000 f935 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <LCD_INIT+0x168>)
 800087a:	2202      	movs	r2, #2
 800087c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <LCD_INIT+0x168>)
 8000880:	2204      	movs	r2, #4
 8000882:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <LCD_INIT+0x168>)
 8000886:	2201      	movs	r2, #1
 8000888:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800088a:	4930      	ldr	r1, [pc, #192]	; (800094c <LCD_INIT+0x168>)
 800088c:	482e      	ldr	r0, [pc, #184]	; (8000948 <LCD_INIT+0x164>)
 800088e:	f000 f928 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <LCD_INIT+0x168>)
 8000894:	2204      	movs	r2, #4
 8000896:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <LCD_INIT+0x168>)
 800089a:	2204      	movs	r2, #4
 800089c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <LCD_INIT+0x168>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80008a4:	4929      	ldr	r1, [pc, #164]	; (800094c <LCD_INIT+0x168>)
 80008a6:	4828      	ldr	r0, [pc, #160]	; (8000948 <LCD_INIT+0x164>)
 80008a8:	f000 f91b 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <LCD_INIT+0x168>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <LCD_INIT+0x168>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <LCD_INIT+0x168>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80008be:	4923      	ldr	r1, [pc, #140]	; (800094c <LCD_INIT+0x168>)
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <LCD_INIT+0x164>)
 80008c2:	f000 f90e 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <LCD_INIT+0x168>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <LCD_INIT+0x168>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <LCD_INIT+0x168>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80008d8:	491c      	ldr	r1, [pc, #112]	; (800094c <LCD_INIT+0x168>)
 80008da:	481b      	ldr	r0, [pc, #108]	; (8000948 <LCD_INIT+0x164>)
 80008dc:	f000 f901 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <LCD_INIT+0x168>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <LCD_INIT+0x168>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <LCD_INIT+0x168>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80008f2:	4916      	ldr	r1, [pc, #88]	; (800094c <LCD_INIT+0x168>)
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <LCD_INIT+0x164>)
 80008f6:	f000 f8f4 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <LCD_INIT+0x168>)
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <LCD_INIT+0x168>)
 8000902:	2204      	movs	r2, #4
 8000904:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <LCD_INIT+0x168>)
 8000908:	2201      	movs	r2, #1
 800090a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800090c:	490f      	ldr	r1, [pc, #60]	; (800094c <LCD_INIT+0x168>)
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <LCD_INIT+0x164>)
 8000910:	f000 f8e7 	bl	8000ae2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_INIT+0x168>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LCD_INIT+0x168>)
 800091c:	2204      	movs	r2, #4
 800091e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <LCD_INIT+0x168>)
 8000922:	2201      	movs	r2, #1
 8000924:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000926:	4909      	ldr	r1, [pc, #36]	; (800094c <LCD_INIT+0x168>)
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <LCD_INIT+0x164>)
 800092a:	f000 f8da 	bl	8000ae2 <MCAL_GPIO_Init>

	LCD_clear_screen();
 800092e:	f7ff ff51 	bl	80007d4 <LCD_clear_screen>
	//#ifdef FOUR_BIT_MODE
	//LCD_WRITE_COMMAND(0X02);
	//LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	//#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000932:	2006      	movs	r0, #6
 8000934:	f000 f80c 	bl	8000950 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	f000 f809 	bl	8000950 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f806 	bl	8000950 <LCD_WRITE_COMMAND>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40010800 	.word	0x40010800
 800094c:	2000003c 	.word	0x2000003c

08000950 <LCD_WRITE_COMMAND>:
void LCD_WRITE_COMMAND(unsigned char command)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 800095a:	f7ff fecf 	bl	80006fc <LCD_isbusy>
	//#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <LCD_WRITE_COMMAND+0x40>)
 8000966:	f000 f973 	bl	8000c50 <MCAL_GPIO_WritePort>
	//	LCD_PORT = command;
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <LCD_WRITE_COMMAND+0x40>)
 8000972:	f000 f956 	bl	8000c22 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <LCD_WRITE_COMMAND+0x40>)
 800097e:	f000 f950 	bl	8000c22 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1<<RW_SWITCH)| (1<<RS_SWITCH);
	LCD_KICK();
 8000982:	f7ff fe7b 	bl	800067c <LCD_KICK>
	//	LCD_CTRL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
	//	wait(1);
	//	LCD_KICK();
	//#endif

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800

08000994 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char data)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 800099e:	f7ff fead 	bl	80006fc <LCD_isbusy>

//#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LCD_WRITE_CHAR+0x4c>)
 80009aa:	f000 f93a 	bl	8000c22 <MCAL_GPIO_WritePin>
//	LCD_CTRL |=(RS_SWITCH);
    MCAL_GPIO_WritePort(LCD_PORT, data);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <LCD_WRITE_CHAR+0x4c>)
 80009b6:	f000 f94b 	bl	8000c50 <MCAL_GPIO_WritePort>
//	LCD_PORT = data;
    MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <LCD_WRITE_CHAR+0x4c>)
 80009c2:	f000 f92e 	bl	8000c22 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1<<RW_SWITCH);
    MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <LCD_WRITE_CHAR+0x4c>)
 80009ce:	f000 f928 	bl	8000c22 <MCAL_GPIO_WritePin>
//	LCD_CTRL |=(RS_SWITCH);
	LCD_KICK();
 80009d2:	f7ff fe53 	bl	800067c <LCD_KICK>
//	LCD_CTRL &= ~(1<<RW_SWITCH) ;
//	LCD_CTRL |= (1<<RS_SWITCH);
//	wait(1);
//	LCD_KICK();
//#endif
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010800 	.word	0x40010800

080009e4 <LCD_WRITE_string>:
void LCD_WRITE_string( char* data)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	int count = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 80009f0:	e01c      	b.n	8000a2c <LCD_WRITE_string+0x48>
	{
		LCD_WRITE_CHAR(*data++);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffca 	bl	8000994 <LCD_WRITE_CHAR>
		count++;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
		if(count==16)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d104      	bne.n	8000a16 <LCD_WRITE_string+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fe4a 	bl	80006a8 <LCD_GOTO_XY>
 8000a14:	e00a      	b.n	8000a2c <LCD_WRITE_string+0x48>
		}
		else if (count==32)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b20      	cmp	r3, #32
 8000a1a:	d107      	bne.n	8000a2c <LCD_WRITE_string+0x48>
		{
			LCD_clear_screen();
 8000a1c:	f7ff feda 	bl	80007d4 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fe40 	bl	80006a8 <LCD_GOTO_XY>
			count=0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1de      	bne.n	80009f2 <LCD_WRITE_string+0xe>
		}

	}
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <GetPosition_CRLH>:


#include "stm32_f103c6_GPIO_driver.h"

uint8_t GetPosition_CRLH(uint16_t PinNumber)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2b80      	cmp	r3, #128	; 0x80
 8000a4a:	d042      	beq.n	8000ad2 <GetPosition_CRLH+0x96>
 8000a4c:	2b80      	cmp	r3, #128	; 0x80
 8000a4e:	dc11      	bgt.n	8000a74 <GetPosition_CRLH+0x38>
 8000a50:	2b08      	cmp	r3, #8
 8000a52:	d036      	beq.n	8000ac2 <GetPosition_CRLH+0x86>
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	dc06      	bgt.n	8000a66 <GetPosition_CRLH+0x2a>
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d02e      	beq.n	8000aba <GetPosition_CRLH+0x7e>
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d02e      	beq.n	8000abe <GetPosition_CRLH+0x82>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d028      	beq.n	8000ab6 <GetPosition_CRLH+0x7a>
 8000a64:	e037      	b.n	8000ad6 <GetPosition_CRLH+0x9a>
 8000a66:	2b20      	cmp	r3, #32
 8000a68:	d02f      	beq.n	8000aca <GetPosition_CRLH+0x8e>
 8000a6a:	2b40      	cmp	r3, #64	; 0x40
 8000a6c:	d02f      	beq.n	8000ace <GetPosition_CRLH+0x92>
 8000a6e:	2b10      	cmp	r3, #16
 8000a70:	d029      	beq.n	8000ac6 <GetPosition_CRLH+0x8a>
 8000a72:	e030      	b.n	8000ad6 <GetPosition_CRLH+0x9a>
 8000a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a78:	d023      	beq.n	8000ac2 <GetPosition_CRLH+0x86>
 8000a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a7e:	dc09      	bgt.n	8000a94 <GetPosition_CRLH+0x58>
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a84:	d019      	beq.n	8000aba <GetPosition_CRLH+0x7e>
 8000a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8a:	d018      	beq.n	8000abe <GetPosition_CRLH+0x82>
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a90:	d011      	beq.n	8000ab6 <GetPosition_CRLH+0x7a>
 8000a92:	e020      	b.n	8000ad6 <GetPosition_CRLH+0x9a>
 8000a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a98:	d017      	beq.n	8000aca <GetPosition_CRLH+0x8e>
 8000a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9e:	dc03      	bgt.n	8000aa8 <GetPosition_CRLH+0x6c>
 8000aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa4:	d00f      	beq.n	8000ac6 <GetPosition_CRLH+0x8a>
 8000aa6:	e016      	b.n	8000ad6 <GetPosition_CRLH+0x9a>
 8000aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aac:	d00f      	beq.n	8000ace <GetPosition_CRLH+0x92>
 8000aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ab2:	d00e      	beq.n	8000ad2 <GetPosition_CRLH+0x96>
 8000ab4:	e00f      	b.n	8000ad6 <GetPosition_CRLH+0x9a>
	{
	case GPIO_PIN_0  :
	case GPIO_PIN_8  :
		return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e00e      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_1  :
	case GPIO_PIN_9  :
		return 4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	e00c      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_2  :
	case GPIO_PIN_10 :
		return 8;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	e00a      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_3  :
	case GPIO_PIN_11 :
		return 12;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	e008      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_4  :
	case GPIO_PIN_12 :
		return 16;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	e006      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_5  :
	case GPIO_PIN_13 :
		return 20;
 8000aca:	2314      	movs	r3, #20
 8000acc:	e004      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_6  :
	case GPIO_PIN_14 :
		return 24;
 8000ace:	2318      	movs	r3, #24
 8000ad0:	e002      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_7  :
	case GPIO_PIN_15 :
		return 28;
 8000ad2:	231c      	movs	r3, #28
 8000ad4:	e000      	b.n	8000ad8 <GetPosition_CRLH+0x9c>
		break;

	}
	return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <MCAL_GPIO_Init>:
 * @retval        -none
 * Note           -stm32F103c6 MCU has GPIO A,B,C,D,E Modules
                  But LQFP48 Package has only GPIO A,B,PART of C,D exported as external PINS from MCu.
 */
void MCAL_GPIO_Init(GPIO_Typedef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000ae2:	b590      	push	{r4, r7, lr}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configures pins(0:7)
	//Port configuration register high (GPIOx_CRH) configures pins(0:15)
	volatile uint8_t* configRegister = NULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	2bff      	cmp	r3, #255	; 0xff
 8000afa:	d801      	bhi.n	8000b00 <MCAL_GPIO_Init+0x1e>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	e001      	b.n	8000b04 <MCAL_GPIO_Init+0x22>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xF << GetPosition_CRLH(PinConfig->GPIO_PinNumber));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff96 	bl	8000a3c <GetPosition_CRLH>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	230f      	movs	r3, #15
 8000b16:	4093      	lsls	r3, r2
 8000b18:	43d9      	mvns	r1, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	b24b      	sxtb	r3, r1
 8000b24:	4013      	ands	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	701a      	strb	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_PP))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d00b      	beq.n	8000b4e <MCAL_GPIO_Init+0x6c>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d007      	beq.n	8000b4e <MCAL_GPIO_Init+0x6c>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d003      	beq.n	8000b4e <MCAL_GPIO_Init+0x6c>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d10e      	bne.n	8000b6c <MCAL_GPIO_Init+0x8a>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( ( ( (PinConfig->GPIO_Mode -4) <<2) | (PinConfig->GPIO_Output_Speed) ) & 0x0f);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	3b04      	subs	r3, #4
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	b25a      	sxtb	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	78db      	ldrb	r3, [r3, #3]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 030f 	and.w	r3, r3, #15
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e02c      	b.n	8000bc6 <MCAL_GPIO_Init+0xe4>

	}
	//if pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_Mode == GPIO_mode_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_mode_Analog) )
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d003      	beq.n	8000b7c <MCAL_GPIO_Init+0x9a>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d107      	bne.n	8000b8c <MCAL_GPIO_Init+0xaa>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (PinConfig->GPIO_Mode) <<2) | 0x0 ) & 0x0f);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	789b      	ldrb	r3, [r3, #2]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e01c      	b.n	8000bc6 <MCAL_GPIO_Init+0xe4>

		}
		else if(PinConfig->GPIO_Mode == GPIO_mode_INPUT_AF)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d102      	bne.n	8000b9a <MCAL_GPIO_Init+0xb8>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_FLO) <<2) | 0x0 ) & 0x0f); //consider it as input floating
 8000b94:	2304      	movs	r3, #4
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e015      	b.n	8000bc6 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD input
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_PU) <<2) | 0x0 ) & 0x0f);
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	73fb      	strb	r3, [r7, #15]
			if ( PinConfig->GPIO_Mode == GPIO_mode_INPUT_PU)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d107      	bne.n	8000bb6 <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table ( PxODR register = 1)
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e007      	b.n	8000bc6 <MCAL_GPIO_Init+0xe4>
			}
			else
			{
				//Table 20. Port bit configuration table ( PxODR register = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	8812      	ldrh	r2, [r2, #0]
 8000bbe:	43d2      	mvns	r2, r2
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60da      	str	r2, [r3, #12]
		}


	}
    //write on CRL OR CRH
	(*configRegister) |= ( (PIN_Config) << GetPosition_CRLH(PinConfig->GPIO_PinNumber) );
 8000bc6:	7bfc      	ldrb	r4, [r7, #15]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff35 	bl	8000a3c <GetPosition_CRLH>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	fa04 f103 	lsl.w	r1, r4, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	b24b      	sxtb	r3, r1
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	701a      	strb	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <MCAL_GPIO_ReadPin>:
 * @param [in]    -PinNumber: set pin Number according @ref GPIO_PINS_define
 * @retval        -the input pin value (two values based on @ref GPIO_PIN_state)
 * Note           -none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOx,uint16_t PinNumber)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
  uint8_t bitStatus;
  if(((GPIOx->IDR) & PinNumber) != (uint32_t) GPIO_PIN_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <MCAL_GPIO_ReadPin+0x1e>
  {
	  bitStatus = GPIO_PIN_SET;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e001      	b.n	8000c16 <MCAL_GPIO_ReadPin+0x22>
  }
  else
  {
	  bitStatus = GPIO_PIN_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitStatus;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <MCAL_GPIO_WritePin>:
 * @param [in]    -value: pin value
 * @retval        -none
 * Note           -none
 */
void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOx,uint16_t PinNumber,uint8_t value)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	707b      	strb	r3, [r7, #1]

	  if(value !=  GPIO_PIN_RESET)
 8000c32:	787b      	ldrb	r3, [r7, #1]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <MCAL_GPIO_WritePin+0x1e>
//		  Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		  These bits are write-only and can be accessed in Word mode only.
//		  0: No action on the corresponding ODRx bit
//	      1: Set the corresponding ODRx bit

		  GPIOx->BSRR = (uint32_t) PinNumber;
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
//		  0: No action on the corresponding ODRx bit
//		  1: Reset the corresponding ODRx bit
//		  Note: If both BSx and BRx are set, BSx has priority
		  GPIOx->BRR = (uint32_t) PinNumber;
	  }
}
 8000c3e:	e002      	b.n	8000c46 <MCAL_GPIO_WritePin+0x24>
		  GPIOx->BRR = (uint32_t) PinNumber;
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	615a      	str	r2, [r3, #20]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <MCAL_GPIO_WritePort>:
 * @param [in]    -value: port value
 * @retval        -none
 * Note           -none
 */
void MCAL_GPIO_WritePort(GPIO_Typedef *GPIOx,uint16_t value)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
   GPIOx->ODR =(uint32_t)value;
 8000c5c:	887a      	ldrh	r2, [r7, #2]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60da      	str	r2, [r3, #12]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <__libc_init_array>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	2500      	movs	r5, #0
 8000c70:	4e0c      	ldr	r6, [pc, #48]	; (8000ca4 <__libc_init_array+0x38>)
 8000c72:	4c0d      	ldr	r4, [pc, #52]	; (8000ca8 <__libc_init_array+0x3c>)
 8000c74:	1ba4      	subs	r4, r4, r6
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	d109      	bne.n	8000c90 <__libc_init_array+0x24>
 8000c7c:	f000 f81a 	bl	8000cb4 <_init>
 8000c80:	2500      	movs	r5, #0
 8000c82:	4e0a      	ldr	r6, [pc, #40]	; (8000cac <__libc_init_array+0x40>)
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <__libc_init_array+0x44>)
 8000c86:	1ba4      	subs	r4, r4, r6
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	42a5      	cmp	r5, r4
 8000c8c:	d105      	bne.n	8000c9a <__libc_init_array+0x2e>
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c94:	4798      	blx	r3
 8000c96:	3501      	adds	r5, #1
 8000c98:	e7ee      	b.n	8000c78 <__libc_init_array+0xc>
 8000c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9e:	4798      	blx	r3
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	e7f2      	b.n	8000c8a <__libc_init_array+0x1e>
 8000ca4:	08000d04 	.word	0x08000d04
 8000ca8:	08000d04 	.word	0x08000d04
 8000cac:	08000d04 	.word	0x08000d04
 8000cb0:	08000d08 	.word	0x08000d08

08000cb4 <_init>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr

08000cc0 <_fini>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr
