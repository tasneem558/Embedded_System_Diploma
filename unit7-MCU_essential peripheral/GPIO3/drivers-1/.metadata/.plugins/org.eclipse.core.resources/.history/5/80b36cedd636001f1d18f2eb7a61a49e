/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32_f103x6.h"
#include "stm32_f103c6_GPIO_driver.h"
#include "keypad.h"
#include "lcd.h"

#define ZERO 0x01
#define ONE 0x79
#define TWO 0x24
#define THREE 0x30
#define FOUR 0x4C
#define FIVE 0x12
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init(void)
{
	//enable clock GPOIA
	RCC_GPIOA_CLK_EN();
	//enable clock GPOIB
	RCC_GPIOB_CLK_EN();
}

void GPIO_init()
{
	GPIO_PinConfig_t PinCfg;
	//PA1 floating input:
	//	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	//	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
	//	MCAL_GPIO_Init(GPIOA,&PinCfg);

	//PB1 output push-pull mode:
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);


	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB,&PinCfg);


	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB,&PinCfg);


	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
	MCAL_GPIO_Init(GPIOB,&PinCfg);



}
void wait_ms(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
	{
		for(j=0;j<1000;j++);
	}
}
int main(void)
{
	clock_init();
	GPIO_init();
	LCD_INIT();
	unsigned char key_pressed;
	LCD_WRITE_string("hello tasneem");
	wait_ms(50);
	LCD_clear_screen();
//	unsigned char Seg_DISPLAY [] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
//	unsigned char LCD_DISPLAY [] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
//	for (unsigned char i = 0; i < 11; i++)
//	{
//		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
//		MCAL_GPIO_WritePort(GPIOB, Seg_DISPLAY[i] << 9); /* write data on to the LED port */
//		wait_ms(100);
//		/* wait for 1 second */
//	}
//	LCD_clear_screen();
//	KEYBAD_INIT();
//	LCD_WRITE_string("Keypad is ready");
//	wait_ms(50);
//	LCD_clear_screen();
	while(1)
	{
//		key_pressed = KEYPAD_GETCHAR();
//		switch (key_pressed)
//		{
//		case 'A':
//			break;
//		case '?':
//			LCD_clear_screen();
//			break;
//		default:
//			LCD_WRITE_CHAR(key_pressed);
//			break;
//		}


		//		//PA1 connected external PUR
		//		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)
		//		{
		//			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
		//			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0); //single pressing
		//		}
		//
		//		//PA13 connected external PDR
		//		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1)
		//		{
		//			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13); //multi pressing
		//		}
		//		wait(1);
	}
}


