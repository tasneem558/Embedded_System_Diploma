
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  4 .ARM          00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000554  08000554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800055c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800055c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002571  00000000  00000000  00010585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000660  00000000  00000000  00012af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000698  00000000  00000000  00013156  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000120  00000000  00000000  000137f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00013910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001df8  00000000  00000000  000139f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000159c  00000000  00000000  000157f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007aba  00000000  00000000  00016d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001e846  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000374  00000000  00000000  0001e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800053c 	.word	0x0800053c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800053c 	.word	0x0800053c

08000170 <clock_init>:
#include "stm32_f103c6_GPIO_driver.h"
#include "keypad.h"
#include "lcd.h"

void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable clock GPOIA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//enable clock GPOIB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;
  //PA1 floating input:
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
    PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
    MCAL_GPIO_Init(GPIOA,&PinCfg);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIO_init+0x64>)
 80001ac:	f000 f8f1 	bl	8000392 <MCAL_GPIO_Init>

  //PB1 output push-pull mode:
    PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
    PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
    PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	480f      	ldr	r0, [pc, #60]	; (8000200 <GPIO_init+0x68>)
 80001c2:	f000 f8e6 	bl	8000392 <MCAL_GPIO_Init>

    //PA13 floating input:
   	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
    PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71bb      	strb	r3, [r7, #6]
    MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <GPIO_init+0x64>)
 80001d6:	f000 f8dc 	bl	8000392 <MCAL_GPIO_Init>

    //PB13 output push-pull mode:
    PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
    PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
    PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_Init(GPIOB,&PinCfg);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIO_init+0x68>)
 80001ee:	f000 f8d0 	bl	8000392 <MCAL_GPIO_Init>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <main>:
	{
		for(j=0;j<1000;j++);
	}
}
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	clock_init();
 8000208:	f7ff ffb2 	bl	8000170 <clock_init>
	GPIO_init();
 800020c:	f7ff ffc4 	bl	8000198 <GPIO_init>
	while(1)
	{
		//PA1 connected external PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)
 8000210:	2102      	movs	r1, #2
 8000212:	4811      	ldr	r0, [pc, #68]	; (8000258 <main+0x54>)
 8000214:	f000 f946 	bl	80004a4 <MCAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d10b      	bne.n	8000236 <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800021e:	2102      	movs	r1, #2
 8000220:	480e      	ldr	r0, [pc, #56]	; (800025c <main+0x58>)
 8000222:	f000 f956 	bl	80004d2 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0); //single pressing
 8000226:	bf00      	nop
 8000228:	2102      	movs	r1, #2
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <main+0x54>)
 800022c:	f000 f93a 	bl	80004a4 <MCAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f8      	beq.n	8000228 <main+0x24>
		}

		//PA13 connected external PDR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1)
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <main+0x54>)
 800023c:	f000 f932 	bl	80004a4 <MCAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d104      	bne.n	8000250 <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13); //multi pressing
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <main+0x58>)
 800024c:	f000 f941 	bl	80004d2 <MCAL_GPIO_TogglePin>
		}
        wait(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f000 f82e 	bl	80002b2 <wait>
	{
 8000256:	e7db      	b.n	8000210 <main+0xc>
 8000258:	40010800 	.word	0x40010800
 800025c:	40010c00 	.word	0x40010c00

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f931 	bl	80004f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffb7 	bl	8000204 <main>

08000296 <LoopForever>:

LoopForever:
    b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800055c 	.word	0x0800055c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>

080002b2 <wait>:
 */

#include "lcd.h"

void wait(int x)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e00c      	b.n	80002da <wait+0x28>
	{
		for(j=0;j<1000;j++);
 80002c0:	2300      	movs	r3, #0
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	e002      	b.n	80002cc <wait+0x1a>
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002d2:	d3f8      	bcc.n	80002c6 <wait+0x14>
	for(i=0;i<x;i++)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d3ee      	bcc.n	80002c0 <wait+0xe>
	}
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <GetPosition_CRLH>:


#include "stm32_f103c6_GPIO_driver.h"

uint8_t GetPosition_CRLH(uint16_t PinNumber)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	2b80      	cmp	r3, #128	; 0x80
 80002fa:	d042      	beq.n	8000382 <GetPosition_CRLH+0x96>
 80002fc:	2b80      	cmp	r3, #128	; 0x80
 80002fe:	dc11      	bgt.n	8000324 <GetPosition_CRLH+0x38>
 8000300:	2b08      	cmp	r3, #8
 8000302:	d036      	beq.n	8000372 <GetPosition_CRLH+0x86>
 8000304:	2b08      	cmp	r3, #8
 8000306:	dc06      	bgt.n	8000316 <GetPosition_CRLH+0x2a>
 8000308:	2b02      	cmp	r3, #2
 800030a:	d02e      	beq.n	800036a <GetPosition_CRLH+0x7e>
 800030c:	2b04      	cmp	r3, #4
 800030e:	d02e      	beq.n	800036e <GetPosition_CRLH+0x82>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d028      	beq.n	8000366 <GetPosition_CRLH+0x7a>
 8000314:	e037      	b.n	8000386 <GetPosition_CRLH+0x9a>
 8000316:	2b20      	cmp	r3, #32
 8000318:	d02f      	beq.n	800037a <GetPosition_CRLH+0x8e>
 800031a:	2b40      	cmp	r3, #64	; 0x40
 800031c:	d02f      	beq.n	800037e <GetPosition_CRLH+0x92>
 800031e:	2b10      	cmp	r3, #16
 8000320:	d029      	beq.n	8000376 <GetPosition_CRLH+0x8a>
 8000322:	e030      	b.n	8000386 <GetPosition_CRLH+0x9a>
 8000324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000328:	d023      	beq.n	8000372 <GetPosition_CRLH+0x86>
 800032a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800032e:	dc09      	bgt.n	8000344 <GetPosition_CRLH+0x58>
 8000330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000334:	d019      	beq.n	800036a <GetPosition_CRLH+0x7e>
 8000336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800033a:	d018      	beq.n	800036e <GetPosition_CRLH+0x82>
 800033c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000340:	d011      	beq.n	8000366 <GetPosition_CRLH+0x7a>
 8000342:	e020      	b.n	8000386 <GetPosition_CRLH+0x9a>
 8000344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000348:	d017      	beq.n	800037a <GetPosition_CRLH+0x8e>
 800034a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034e:	dc03      	bgt.n	8000358 <GetPosition_CRLH+0x6c>
 8000350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000354:	d00f      	beq.n	8000376 <GetPosition_CRLH+0x8a>
 8000356:	e016      	b.n	8000386 <GetPosition_CRLH+0x9a>
 8000358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800035c:	d00f      	beq.n	800037e <GetPosition_CRLH+0x92>
 800035e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000362:	d00e      	beq.n	8000382 <GetPosition_CRLH+0x96>
 8000364:	e00f      	b.n	8000386 <GetPosition_CRLH+0x9a>
	{
	case GPIO_PIN_0  :
	case GPIO_PIN_8  :
		return 0;
 8000366:	2300      	movs	r3, #0
 8000368:	e00e      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_1  :
	case GPIO_PIN_9  :
		return 4;
 800036a:	2304      	movs	r3, #4
 800036c:	e00c      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_2  :
	case GPIO_PIN_10 :
		return 8;
 800036e:	2308      	movs	r3, #8
 8000370:	e00a      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_3  :
	case GPIO_PIN_11 :
		return 12;
 8000372:	230c      	movs	r3, #12
 8000374:	e008      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_4  :
	case GPIO_PIN_12 :
		return 16;
 8000376:	2310      	movs	r3, #16
 8000378:	e006      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_5  :
	case GPIO_PIN_13 :
		return 20;
 800037a:	2314      	movs	r3, #20
 800037c:	e004      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_6  :
	case GPIO_PIN_14 :
		return 24;
 800037e:	2318      	movs	r3, #24
 8000380:	e002      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_7  :
	case GPIO_PIN_15 :
		return 28;
 8000382:	231c      	movs	r3, #28
 8000384:	e000      	b.n	8000388 <GetPosition_CRLH+0x9c>
		break;

	}
	return 0;
 8000386:	2300      	movs	r3, #0
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <MCAL_GPIO_Init>:
 * @retval        -none
 * Note           -stm32F103c6 MCU has GPIO A,B,C,D,E Modules
                  But LQFP48 Package has only GPIO A,B,PART of C,D exported as external PINS from MCu.
 */
void MCAL_GPIO_Init(GPIO_Typedef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000392:	b590      	push	{r4, r7, lr}
 8000394:	b085      	sub	sp, #20
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configures pins(0:7)
	//Port configuration register high (GPIOx_CRH) configures pins(0:15)
	volatile uint8_t* configRegister = NULL;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	2bff      	cmp	r3, #255	; 0xff
 80003aa:	d801      	bhi.n	80003b0 <MCAL_GPIO_Init+0x1e>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	e001      	b.n	80003b4 <MCAL_GPIO_Init+0x22>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3304      	adds	r3, #4
 80003b4:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xF << GetPosition_CRLH(PinConfig->GPIO_PinNumber));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff96 	bl	80002ec <GetPosition_CRLH>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	230f      	movs	r3, #15
 80003c6:	4093      	lsls	r3, r2
 80003c8:	43d9      	mvns	r1, r3
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	b25a      	sxtb	r2, r3
 80003d2:	b24b      	sxtb	r3, r1
 80003d4:	4013      	ands	r3, r2
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	701a      	strb	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_PP))
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	789b      	ldrb	r3, [r3, #2]
 80003e2:	2b07      	cmp	r3, #7
 80003e4:	d00b      	beq.n	80003fe <MCAL_GPIO_Init+0x6c>
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d007      	beq.n	80003fe <MCAL_GPIO_Init+0x6c>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d003      	beq.n	80003fe <MCAL_GPIO_Init+0x6c>
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	789b      	ldrb	r3, [r3, #2]
 80003fa:	2b04      	cmp	r3, #4
 80003fc:	d10e      	bne.n	800041c <MCAL_GPIO_Init+0x8a>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( ( ( (PinConfig->GPIO_Mode -4) <<2) | (PinConfig->GPIO_Output_Speed) ) & 0x0f);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	3b04      	subs	r3, #4
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	b25a      	sxtb	r2, r3
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	78db      	ldrb	r3, [r3, #3]
 800040c:	b25b      	sxtb	r3, r3
 800040e:	4313      	orrs	r3, r2
 8000410:	b25b      	sxtb	r3, r3
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f003 030f 	and.w	r3, r3, #15
 8000418:	73fb      	strb	r3, [r7, #15]
 800041a:	e02c      	b.n	8000476 <MCAL_GPIO_Init+0xe4>

	}
	//if pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_Mode == GPIO_mode_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_mode_Analog) )
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d003      	beq.n	800042c <MCAL_GPIO_Init+0x9a>
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d107      	bne.n	800043c <MCAL_GPIO_Init+0xaa>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (PinConfig->GPIO_Mode) <<2) | 0x0 ) & 0x0f);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	73fb      	strb	r3, [r7, #15]
 800043a:	e01c      	b.n	8000476 <MCAL_GPIO_Init+0xe4>

		}
		else if(PinConfig->GPIO_Mode == GPIO_mode_INPUT_AF)
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	2b08      	cmp	r3, #8
 8000442:	d102      	bne.n	800044a <MCAL_GPIO_Init+0xb8>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_FLO) <<2) | 0x0 ) & 0x0f); //consider it as input floating
 8000444:	2304      	movs	r3, #4
 8000446:	73fb      	strb	r3, [r7, #15]
 8000448:	e015      	b.n	8000476 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD input
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_PU) <<2) | 0x0 ) & 0x0f);
 800044a:	2308      	movs	r3, #8
 800044c:	73fb      	strb	r3, [r7, #15]
			if ( PinConfig->GPIO_Mode == GPIO_mode_INPUT_PU)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	2b02      	cmp	r3, #2
 8000454:	d107      	bne.n	8000466 <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table ( PxODR register = 1)
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	8812      	ldrh	r2, [r2, #0]
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	e007      	b.n	8000476 <MCAL_GPIO_Init+0xe4>
			}
			else
			{
				//Table 20. Port bit configuration table ( PxODR register = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	43d2      	mvns	r2, r2
 8000470:	401a      	ands	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
		}


	}
    //write on CRL OR CRH
	(*configRegister) |= ( (PIN_Config) << GetPosition_CRLH(PinConfig->GPIO_PinNumber) );
 8000476:	7bfc      	ldrb	r4, [r7, #15]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff35 	bl	80002ec <GetPosition_CRLH>
 8000482:	4603      	mov	r3, r0
 8000484:	fa04 f103 	lsl.w	r1, r4, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	b25a      	sxtb	r2, r3
 8000490:	b24b      	sxtb	r3, r1
 8000492:	4313      	orrs	r3, r2
 8000494:	b25b      	sxtb	r3, r3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	701a      	strb	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd90      	pop	{r4, r7, pc}

080004a4 <MCAL_GPIO_ReadPin>:
 * @param [in]    -PinNumber: set pin Number according @ref GPIO_PINS_define
 * @retval        -the input pin value (two values based on @ref GPIO_PIN_state)
 * Note           -none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOx,uint16_t PinNumber)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitStatus;
  if(((GPIOx->IDR) & PinNumber) != (uint32_t) GPIO_PIN_RESET)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	4013      	ands	r3, r2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d002      	beq.n	80004c2 <MCAL_GPIO_ReadPin+0x1e>
  {
	  bitStatus = GPIO_PIN_SET;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
 80004c0:	e001      	b.n	80004c6 <MCAL_GPIO_ReadPin+0x22>
  }
  else
  {
	  bitStatus = GPIO_PIN_RESET;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitStatus;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <MCAL_GPIO_TogglePin>:
 * @retval        -none
 * Note           -none
 */

void MCAL_GPIO_TogglePin(GPIO_Typedef *GPIOx,uint16_t PinNumber)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	460b      	mov	r3, r1
 80004dc:	807b      	strh	r3, [r7, #2]
  GPIOx->ODR ^=(PinNumber);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68da      	ldr	r2, [r3, #12]
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	405a      	eors	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60da      	str	r2, [r3, #12]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <__libc_init_array>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	2500      	movs	r5, #0
 80004f8:	4e0c      	ldr	r6, [pc, #48]	; (800052c <__libc_init_array+0x38>)
 80004fa:	4c0d      	ldr	r4, [pc, #52]	; (8000530 <__libc_init_array+0x3c>)
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	42a5      	cmp	r5, r4
 8000502:	d109      	bne.n	8000518 <__libc_init_array+0x24>
 8000504:	f000 f81a 	bl	800053c <_init>
 8000508:	2500      	movs	r5, #0
 800050a:	4e0a      	ldr	r6, [pc, #40]	; (8000534 <__libc_init_array+0x40>)
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <__libc_init_array+0x44>)
 800050e:	1ba4      	subs	r4, r4, r6
 8000510:	10a4      	asrs	r4, r4, #2
 8000512:	42a5      	cmp	r5, r4
 8000514:	d105      	bne.n	8000522 <__libc_init_array+0x2e>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800051c:	4798      	blx	r3
 800051e:	3501      	adds	r5, #1
 8000520:	e7ee      	b.n	8000500 <__libc_init_array+0xc>
 8000522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000526:	4798      	blx	r3
 8000528:	3501      	adds	r5, #1
 800052a:	e7f2      	b.n	8000512 <__libc_init_array+0x1e>
 800052c:	08000554 	.word	0x08000554
 8000530:	08000554 	.word	0x08000554
 8000534:	08000554 	.word	0x08000554
 8000538:	08000558 	.word	0x08000558

0800053c <_init>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr

08000548 <_fini>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr
