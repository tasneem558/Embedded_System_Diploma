
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d08  08000d08  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d08  08000d08  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d08  08000d08  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d08  08000d08  00010d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000d30  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000d30  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030ed  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000817  00000000  00000000  00023136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000077c  00000000  00000000  0002394d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  000240d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024220  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fb4  00000000  00000000  00024328  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bc4  00000000  00000000  000262dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007b63  00000000  00000000  00027ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002fa03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003f0  00000000  00000000  0002fa80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cc0 	.word	0x08000cc0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000cc0 	.word	0x08000cc0

08000170 <KEYBAD_INIT>:
		for(j=0;j<1000;j++);
	}
}

void KEYBAD_INIT()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber=R0;
 8000174:	4b37      	ldr	r3, [pc, #220]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800017a:	4b36      	ldr	r3, [pc, #216]	; (8000254 <KEYBAD_INIT+0xe4>)
 800017c:	2204      	movs	r2, #4
 800017e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000180:	4b34      	ldr	r3, [pc, #208]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000186:	4933      	ldr	r1, [pc, #204]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000188:	4833      	ldr	r0, [pc, #204]	; (8000258 <KEYBAD_INIT+0xe8>)
 800018a:	f000 fcaf 	bl	8000aec <MCAL_GPIO_Init>
	//	DATADir_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
	//	DATADir_KEYPAD_PORT |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
	//	KEYPAD_PORT = 0xFF;

	PinCfg.GPIO_PinNumber=R1;
 800018e:	4b31      	ldr	r3, [pc, #196]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000190:	2202      	movs	r2, #2
 8000192:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000196:	2204      	movs	r2, #4
 8000198:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800019a:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <KEYBAD_INIT+0xe4>)
 800019c:	2201      	movs	r2, #1
 800019e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80001a0:	492c      	ldr	r1, [pc, #176]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001a2:	482d      	ldr	r0, [pc, #180]	; (8000258 <KEYBAD_INIT+0xe8>)
 80001a4:	f000 fca2 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=R2;
 80001a8:	4b2a      	ldr	r3, [pc, #168]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001ae:	4b29      	ldr	r3, [pc, #164]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001b0:	2204      	movs	r2, #4
 80001b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001b6:	2201      	movs	r2, #1
 80001b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <KEYBAD_INIT+0xe8>)
 80001be:	f000 fc95 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=R3;
 80001c2:	4b24      	ldr	r3, [pc, #144]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001c4:	2210      	movs	r2, #16
 80001c6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001c8:	4b22      	ldr	r3, [pc, #136]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001ca:	2204      	movs	r2, #4
 80001cc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80001d4:	491f      	ldr	r1, [pc, #124]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001d6:	4820      	ldr	r0, [pc, #128]	; (8000258 <KEYBAD_INIT+0xe8>)
 80001d8:	f000 fc88 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C0;
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001de:	2220      	movs	r2, #32
 80001e0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001e2:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001e4:	2204      	movs	r2, #4
 80001e6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 80001ee:	4919      	ldr	r1, [pc, #100]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001f0:	4819      	ldr	r0, [pc, #100]	; (8000258 <KEYBAD_INIT+0xe8>)
 80001f2:	f000 fc7b 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C1;
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001f8:	2240      	movs	r2, #64	; 0x40
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <KEYBAD_INIT+0xe4>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000208:	4912      	ldr	r1, [pc, #72]	; (8000254 <KEYBAD_INIT+0xe4>)
 800020a:	4813      	ldr	r0, [pc, #76]	; (8000258 <KEYBAD_INIT+0xe8>)
 800020c:	f000 fc6e 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C2;
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000218:	2204      	movs	r2, #4
 800021a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <KEYBAD_INIT+0xe4>)
 800021e:	2201      	movs	r2, #1
 8000220:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <KEYBAD_INIT+0xe8>)
 8000226:	f000 fc61 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber=C3;
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <KEYBAD_INIT+0xe4>)
 800022c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000230:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <KEYBAD_INIT+0xe4>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT,&PinCfg);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <KEYBAD_INIT+0xe4>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <KEYBAD_INIT+0xe8>)
 8000242:	f000 fc53 	bl	8000aec <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000246:	21ff      	movs	r1, #255	; 0xff
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <KEYBAD_INIT+0xe8>)
 800024a:	f000 fd06 	bl	8000c5a <MCAL_GPIO_WritePort>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000003c 	.word	0x2000003c
 8000258:	40010c00 	.word	0x40010c00

0800025c <KEYPAD_GETCHAR>:
char KEYPAD_GETCHAR()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	int i,j;
	for(i=0;i<4;i++)
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <KEYPAD_GETCHAR+0x176>
	{
		//		KEYPAD_PORT |= ((1<<keypad_C[0]) | (keypad_C[1]) | (keypad_C[2]) | (keypad_C[3]));
		//		KEYPAD_PORT &= ~(1<<keypad_C[i]);

		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000274:	f000 fcda 	bl	8000c2c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000284:	f000 fcd2 	bl	8000c2c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000294:	f000 fcca 	bl	8000c2c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002a4:	f000 fcc2 	bl	8000c2c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_C[i], GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002b8:	f000 fcb8 	bl	8000c2c <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <KEYPAD_GETCHAR+0x168>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_R[j]) == 0)
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <KEYPAD_GETCHAR+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002d0:	f000 fc95 	bl	8000bfe <MCAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <KEYPAD_GETCHAR+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_R[j]) == 0);
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <KEYPAD_GETCHAR+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002ea:	f000 fc88 	bl	8000bfe <MCAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <KEYPAD_GETCHAR+0x80>
				switch(i)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <KEYPAD_GETCHAR+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <KEYPAD_GETCHAR+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
				{
				case(0):
				  {
					if(j==0)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <KEYPAD_GETCHAR+0xbe>
						return '7';
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <KEYPAD_GETCHAR+0xc8>
						return '4';
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <KEYPAD_GETCHAR+0xd2>
						return '1';
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d13d      	bne.n	80003b0 <KEYPAD_GETCHAR+0x154>
						return '!';
 8000334:	2321      	movs	r3, #33	; 0x21
 8000336:	e051      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(1):
				   {
					if(j==0)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <KEYPAD_GETCHAR+0xe6>
						return '8';
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <KEYPAD_GETCHAR+0xf0>
						return '5';
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <KEYPAD_GETCHAR+0xfa>
						return '2';
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d12b      	bne.n	80003b4 <KEYPAD_GETCHAR+0x158>
						return '0';
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(2):
				   {
					if(j==0)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <KEYPAD_GETCHAR+0x10e>
						return '9';
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <KEYPAD_GETCHAR+0x118>
						return '6';
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <KEYPAD_GETCHAR+0x122>
						return '3';
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d119      	bne.n	80003b8 <KEYPAD_GETCHAR+0x15c>
						return '=';
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					break;
				   }
				case(3):
				   {
					if(j==0)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <KEYPAD_GETCHAR+0x136>
						return '/';
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <KEYPAD_GETCHAR+0x140>
						return '*';
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==2)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <KEYPAD_GETCHAR+0x14a>
						return '-';
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j==1)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d107      	bne.n	80003bc <KEYPAD_GETCHAR+0x160>
						return '+';
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <KEYPAD_GETCHAR+0x162>
					break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <KEYPAD_GETCHAR+0x162>
					break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <KEYPAD_GETCHAR+0x162>
					break;
 80003bc:	bf00      	nop
		for(j=0;j<4;j++)
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <KEYPAD_GETCHAR+0x66>
	for(i=0;i<4;i++)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <KEYPAD_GETCHAR+0xc>
				}
			}

		}
	}
	return 'N';
 80003da:	234e      	movs	r3, #78	; 0x4e
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <wait>:
 */

#include "../../HAL/LCD_DRIVER/lcd.h"

void wait(int x)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00b      	b.n	8000416 <wait+0x26>
	{
		for(j=0;j<255;j++);
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	e002      	b.n	800040a <wait+0x1a>
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3301      	adds	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2bfe      	cmp	r3, #254	; 0xfe
 800040e:	d9f9      	bls.n	8000404 <wait+0x14>
	for(i=0;i<x;i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3ef      	bcc.n	80003fe <wait+0xe>
	}
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <LCD_KICK>:
//================================================================
void LCD_KICK(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000432:	4807      	ldr	r0, [pc, #28]	; (8000450 <LCD_KICK+0x28>)
 8000434:	f000 fbfa 	bl	8000c2c <MCAL_GPIO_WritePin>
	wait(50);
 8000438:	2032      	movs	r0, #50	; 0x32
 800043a:	f7ff ffd9 	bl	80003f0 <wait>
	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <LCD_KICK+0x28>)
 8000446:	f000 fbf1 	bl	8000c2c <MCAL_GPIO_WritePin>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010800 	.word	0x40010800

08000454 <LCD_GOTO_XY>:
//================================================================
void LCD_GOTO_XY(int line,int position)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	if(line ==1)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10d      	bne.n	8000480 <LCD_GOTO_XY+0x2c>
	{
		if(position >=0 && position <16)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	db1a      	blt.n	80004a0 <LCD_GOTO_XY+0x4c>
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	dc17      	bgt.n	80004a0 <LCD_GOTO_XY+0x4c>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	3b80      	subs	r3, #128	; 0x80
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f94b 	bl	8000714 <LCD_WRITE_COMMAND>
		if(position >=0 && position <16)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 800047e:	e00f      	b.n	80004a0 <LCD_GOTO_XY+0x4c>
	else if(line==2)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d10c      	bne.n	80004a0 <LCD_GOTO_XY+0x4c>
		if(position >=0 && position <16)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	db09      	blt.n	80004a0 <LCD_GOTO_XY+0x4c>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	2b0f      	cmp	r3, #15
 8000490:	dc06      	bgt.n	80004a0 <LCD_GOTO_XY+0x4c>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	3b40      	subs	r3, #64	; 0x40
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f93a 	bl	8000714 <LCD_WRITE_COMMAND>
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <LCD_isbusy>:
//================================================================
void LCD_isbusy(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <LCD_isbusy+0xd0>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <LCD_isbusy+0xd0>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004b8:	492f      	ldr	r1, [pc, #188]	; (8000578 <LCD_isbusy+0xd0>)
 80004ba:	4830      	ldr	r0, [pc, #192]	; (800057c <LCD_isbusy+0xd4>)
 80004bc:	f000 fb16 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <LCD_isbusy+0xd0>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <LCD_isbusy+0xd0>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004cc:	492a      	ldr	r1, [pc, #168]	; (8000578 <LCD_isbusy+0xd0>)
 80004ce:	482b      	ldr	r0, [pc, #172]	; (800057c <LCD_isbusy+0xd4>)
 80004d0:	f000 fb0c 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <LCD_isbusy+0xd0>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <LCD_isbusy+0xd0>)
 80004dc:	2201      	movs	r2, #1
 80004de:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004e0:	4925      	ldr	r1, [pc, #148]	; (8000578 <LCD_isbusy+0xd0>)
 80004e2:	4826      	ldr	r0, [pc, #152]	; (800057c <LCD_isbusy+0xd4>)
 80004e4:	f000 fb02 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <LCD_isbusy+0xd0>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <LCD_isbusy+0xd0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80004f4:	4920      	ldr	r1, [pc, #128]	; (8000578 <LCD_isbusy+0xd0>)
 80004f6:	4821      	ldr	r0, [pc, #132]	; (800057c <LCD_isbusy+0xd4>)
 80004f8:	f000 faf8 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <LCD_isbusy+0xd0>)
 80004fe:	2210      	movs	r2, #16
 8000500:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <LCD_isbusy+0xd0>)
 8000504:	2201      	movs	r2, #1
 8000506:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000508:	491b      	ldr	r1, [pc, #108]	; (8000578 <LCD_isbusy+0xd0>)
 800050a:	481c      	ldr	r0, [pc, #112]	; (800057c <LCD_isbusy+0xd4>)
 800050c:	f000 faee 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <LCD_isbusy+0xd0>)
 8000512:	2220      	movs	r2, #32
 8000514:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <LCD_isbusy+0xd0>)
 8000518:	2201      	movs	r2, #1
 800051a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800051c:	4916      	ldr	r1, [pc, #88]	; (8000578 <LCD_isbusy+0xd0>)
 800051e:	4817      	ldr	r0, [pc, #92]	; (800057c <LCD_isbusy+0xd4>)
 8000520:	f000 fae4 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <LCD_isbusy+0xd0>)
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <LCD_isbusy+0xd0>)
 800052c:	2201      	movs	r2, #1
 800052e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000530:	4911      	ldr	r1, [pc, #68]	; (8000578 <LCD_isbusy+0xd0>)
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <LCD_isbusy+0xd4>)
 8000534:	f000 fada 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <LCD_isbusy+0xd0>)
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <LCD_isbusy+0xd0>)
 8000540:	2201      	movs	r2, #1
 8000542:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <LCD_isbusy+0xd0>)
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <LCD_isbusy+0xd4>)
 8000548:	f000 fad0 	bl	8000aec <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <LCD_isbusy+0xd4>)
 8000554:	f000 fb6a 	bl	8000c2c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <LCD_isbusy+0xd4>)
 8000560:	f000 fb64 	bl	8000c2c <MCAL_GPIO_WritePin>
	LCD_KICK();
 8000564:	f7ff ff60 	bl	8000428 <LCD_KICK>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <LCD_isbusy+0xd4>)
 8000570:	f000 fb5c 	bl	8000c2c <MCAL_GPIO_WritePin>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000003c 	.word	0x2000003c
 800057c:	40010800 	.word	0x40010800

08000580 <LCD_clear_screen>:
//================================================================
void LCD_clear_screen()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 f8c5 	bl	8000714 <LCD_WRITE_COMMAND>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <LCD_INIT>:
//================================================================
void LCD_INIT(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	wait(25);
 8000594:	2019      	movs	r0, #25
 8000596:	f7ff ff2b 	bl	80003f0 <wait>
	LCD_isbusy();
 800059a:	f7ff ff85 	bl	80004a8 <LCD_isbusy>

	//ENABLE_SWITCH,RS_SWITCH,RW_SWITCH PUSHBUTTON output:
	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 800059e:	4b5b      	ldr	r3, [pc, #364]	; (800070c <LCD_INIT+0x17c>)
 80005a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80005a6:	4b59      	ldr	r3, [pc, #356]	; (800070c <LCD_INIT+0x17c>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80005ac:	4b57      	ldr	r3, [pc, #348]	; (800070c <LCD_INIT+0x17c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80005b2:	4956      	ldr	r1, [pc, #344]	; (800070c <LCD_INIT+0x17c>)
 80005b4:	4856      	ldr	r0, [pc, #344]	; (8000710 <LCD_INIT+0x180>)
 80005b6:	f000 fa99 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80005ba:	4b54      	ldr	r3, [pc, #336]	; (800070c <LCD_INIT+0x17c>)
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80005c2:	4b52      	ldr	r3, [pc, #328]	; (800070c <LCD_INIT+0x17c>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80005c8:	4b50      	ldr	r3, [pc, #320]	; (800070c <LCD_INIT+0x17c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80005ce:	494f      	ldr	r1, [pc, #316]	; (800070c <LCD_INIT+0x17c>)
 80005d0:	484f      	ldr	r0, [pc, #316]	; (8000710 <LCD_INIT+0x180>)
 80005d2:	f000 fa8b 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80005d6:	4b4d      	ldr	r3, [pc, #308]	; (800070c <LCD_INIT+0x17c>)
 80005d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <LCD_INIT+0x17c>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80005e4:	4b49      	ldr	r3, [pc, #292]	; (800070c <LCD_INIT+0x17c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80005ea:	4948      	ldr	r1, [pc, #288]	; (800070c <LCD_INIT+0x17c>)
 80005ec:	4848      	ldr	r0, [pc, #288]	; (8000710 <LCD_INIT+0x180>)
 80005ee:	f000 fa7d 	bl	8000aec <MCAL_GPIO_Init>



	//  DATA PINS OUTPUT with speed 10MHZ
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80005f2:	4b46      	ldr	r3, [pc, #280]	; (800070c <LCD_INIT+0x17c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <LCD_INIT+0x17c>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <LCD_INIT+0x17c>)
 8000600:	2201      	movs	r2, #1
 8000602:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000604:	4941      	ldr	r1, [pc, #260]	; (800070c <LCD_INIT+0x17c>)
 8000606:	4842      	ldr	r0, [pc, #264]	; (8000710 <LCD_INIT+0x180>)
 8000608:	f000 fa70 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <LCD_INIT+0x17c>)
 800060e:	2202      	movs	r2, #2
 8000610:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <LCD_INIT+0x17c>)
 8000614:	2204      	movs	r2, #4
 8000616:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000618:	4b3c      	ldr	r3, [pc, #240]	; (800070c <LCD_INIT+0x17c>)
 800061a:	2201      	movs	r2, #1
 800061c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800061e:	493b      	ldr	r1, [pc, #236]	; (800070c <LCD_INIT+0x17c>)
 8000620:	483b      	ldr	r0, [pc, #236]	; (8000710 <LCD_INIT+0x180>)
 8000622:	f000 fa63 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000626:	4b39      	ldr	r3, [pc, #228]	; (800070c <LCD_INIT+0x17c>)
 8000628:	2204      	movs	r2, #4
 800062a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <LCD_INIT+0x17c>)
 800062e:	2204      	movs	r2, #4
 8000630:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <LCD_INIT+0x17c>)
 8000634:	2201      	movs	r2, #1
 8000636:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000638:	4934      	ldr	r1, [pc, #208]	; (800070c <LCD_INIT+0x17c>)
 800063a:	4835      	ldr	r0, [pc, #212]	; (8000710 <LCD_INIT+0x180>)
 800063c:	f000 fa56 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <LCD_INIT+0x17c>)
 8000642:	2208      	movs	r2, #8
 8000644:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <LCD_INIT+0x17c>)
 8000648:	2204      	movs	r2, #4
 800064a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <LCD_INIT+0x17c>)
 800064e:	2201      	movs	r2, #1
 8000650:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000652:	492e      	ldr	r1, [pc, #184]	; (800070c <LCD_INIT+0x17c>)
 8000654:	482e      	ldr	r0, [pc, #184]	; (8000710 <LCD_INIT+0x180>)
 8000656:	f000 fa49 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <LCD_INIT+0x17c>)
 800065c:	2210      	movs	r2, #16
 800065e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <LCD_INIT+0x17c>)
 8000662:	2204      	movs	r2, #4
 8000664:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <LCD_INIT+0x17c>)
 8000668:	2201      	movs	r2, #1
 800066a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 800066c:	4927      	ldr	r1, [pc, #156]	; (800070c <LCD_INIT+0x17c>)
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <LCD_INIT+0x180>)
 8000670:	f000 fa3c 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <LCD_INIT+0x17c>)
 8000676:	2220      	movs	r2, #32
 8000678:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <LCD_INIT+0x17c>)
 800067c:	2204      	movs	r2, #4
 800067e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <LCD_INIT+0x17c>)
 8000682:	2201      	movs	r2, #1
 8000684:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 8000686:	4921      	ldr	r1, [pc, #132]	; (800070c <LCD_INIT+0x17c>)
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <LCD_INIT+0x180>)
 800068a:	f000 fa2f 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <LCD_INIT+0x17c>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <LCD_INIT+0x17c>)
 8000696:	2204      	movs	r2, #4
 8000698:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <LCD_INIT+0x17c>)
 800069c:	2201      	movs	r2, #1
 800069e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80006a0:	491a      	ldr	r1, [pc, #104]	; (800070c <LCD_INIT+0x17c>)
 80006a2:	481b      	ldr	r0, [pc, #108]	; (8000710 <LCD_INIT+0x180>)
 80006a4:	f000 fa22 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <LCD_INIT+0x17c>)
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <LCD_INIT+0x17c>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <LCD_INIT+0x17c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT,&PinCfg);
 80006ba:	4914      	ldr	r1, [pc, #80]	; (800070c <LCD_INIT+0x17c>)
 80006bc:	4814      	ldr	r0, [pc, #80]	; (8000710 <LCD_INIT+0x180>)
 80006be:	f000 fa15 	bl	8000aec <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(LCD_CTRL, ENABLE_SWITCH, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <LCD_INIT+0x180>)
 80006ca:	f000 faaf 	bl	8000c2c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <LCD_INIT+0x180>)
 80006d6:	f000 faa9 	bl	8000c2c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <LCD_INIT+0x180>)
 80006e2:	f000 faa3 	bl	8000c2c <MCAL_GPIO_WritePin>

	wait(20);
 80006e6:	2014      	movs	r0, #20
 80006e8:	f7ff fe82 	bl	80003f0 <wait>

	LCD_clear_screen();
 80006ec:	f7ff ff48 	bl	8000580 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80006f0:	2038      	movs	r0, #56	; 0x38
 80006f2:	f000 f80f 	bl	8000714 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80006f6:	2006      	movs	r0, #6
 80006f8:	f000 f80c 	bl	8000714 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	f000 f809 	bl	8000714 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f806 	bl	8000714 <LCD_WRITE_COMMAND>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000003c 	.word	0x2000003c
 8000710:	40010800 	.word	0x40010800

08000714 <LCD_WRITE_COMMAND>:
//================================================================
void LCD_WRITE_COMMAND(unsigned char command)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 800071e:	f7ff fec3 	bl	80004a8 <LCD_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	b29b      	uxth	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <LCD_WRITE_COMMAND+0x44>)
 800072a:	f000 fa96 	bl	8000c5a <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <LCD_WRITE_COMMAND+0x44>)
 8000736:	f000 fa79 	bl	8000c2c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <LCD_WRITE_COMMAND+0x44>)
 8000742:	f000 fa73 	bl	8000c2c <MCAL_GPIO_WritePin>
	wait(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff fe52 	bl	80003f0 <wait>
	LCD_KICK();
 800074c:	f7ff fe6c 	bl	8000428 <LCD_KICK>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010800 	.word	0x40010800

0800075c <LCD_WRITE_CHAR>:
//================================================================
void LCD_WRITE_CHAR(unsigned char data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	LCD_isbusy();
 8000766:	f7ff fe9f 	bl	80004a8 <LCD_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, data);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	b29b      	uxth	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LCD_WRITE_CHAR+0x44>)
 8000772:	f000 fa72 	bl	8000c5a <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <LCD_WRITE_CHAR+0x44>)
 800077e:	f000 fa55 	bl	8000c2c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <LCD_WRITE_CHAR+0x44>)
 800078a:	f000 fa4f 	bl	8000c2c <MCAL_GPIO_WritePin>
	wait(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fe2e 	bl	80003f0 <wait>
	LCD_KICK();
 8000794:	f7ff fe48 	bl	8000428 <LCD_KICK>

}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40010800 	.word	0x40010800

080007a4 <LCD_WRITE_string>:
//================================================================
void LCD_WRITE_string( char* data)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	int count = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 80007b0:	e01c      	b.n	80007ec <LCD_WRITE_string+0x48>
	{
		LCD_WRITE_CHAR(*data++);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffce 	bl	800075c <LCD_WRITE_CHAR>
		count++;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
		if(count==16)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b10      	cmp	r3, #16
 80007ca:	d104      	bne.n	80007d6 <LCD_WRITE_string+0x32>
		{
			LCD_GOTO_XY(2,0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2002      	movs	r0, #2
 80007d0:	f7ff fe40 	bl	8000454 <LCD_GOTO_XY>
 80007d4:	e00a      	b.n	80007ec <LCD_WRITE_string+0x48>
		}
		else if (count==32)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d107      	bne.n	80007ec <LCD_WRITE_string+0x48>
		{
			LCD_clear_screen();
 80007dc:	f7ff fed0 	bl	8000580 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff fe36 	bl	8000454 <LCD_GOTO_XY>
			count=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
	while(*data >0)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1de      	bne.n	80007b2 <LCD_WRITE_string+0xe>
		}

	}
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	//enable clock GPOIA
	RCC_GPIOA_CLK_EN();
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <clock_init+0x24>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <clock_init+0x24>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
	//enable clock GPOIB
	RCC_GPIOB_CLK_EN();
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <clock_init+0x24>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <clock_init+0x24>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6193      	str	r3, [r2, #24]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000

08000824 <GPIO_init>:

void GPIO_init()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	//	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	//	PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
	//	MCAL_GPIO_Init(GPIOA,&PinCfg);

	//PB1 output push-pull mode:
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800082a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000830:	2304      	movs	r3, #4
 8000832:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000834:	2301      	movs	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4827      	ldr	r0, [pc, #156]	; (80008dc <GPIO_init+0xb8>)
 800083e:	f000 f955 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000848:	2304      	movs	r3, #4
 800084a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800084c:	2301      	movs	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <GPIO_init+0xb8>)
 8000856:	f000 f949 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800085a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800085e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000860:	2304      	movs	r3, #4
 8000862:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000864:	2301      	movs	r3, #1
 8000866:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <GPIO_init+0xb8>)
 800086e:	f000 f93d 	bl	8000aec <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000878:	2304      	movs	r3, #4
 800087a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 800087c:	2301      	movs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <GPIO_init+0xb8>)
 8000886:	f000 f931 	bl	8000aec <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 8000890:	2304      	movs	r3, #4
 8000892:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 8000894:	2301      	movs	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <GPIO_init+0xb8>)
 800089e:	f000 f925 	bl	8000aec <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80008a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008a6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80008a8:	2304      	movs	r3, #4
 80008aa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80008ac:	2301      	movs	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <GPIO_init+0xb8>)
 80008b6:	f000 f919 	bl	8000aec <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80008ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008be:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
 80008c0:	2304      	movs	r3, #4
 80008c2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
 80008c4:	2301      	movs	r3, #1
 80008c6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB,&PinCfg);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <GPIO_init+0xb8>)
 80008ce:	f000 f90d 	bl	8000aec <MCAL_GPIO_Init>



}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <wait_ms>:
void wait_ms(int x)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e00b      	b.n	8000906 <wait_ms+0x26>
	{
		for(j=0;j<255;j++);
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	e002      	b.n	80008fa <wait_ms+0x1a>
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2bfe      	cmp	r3, #254	; 0xfe
 80008fe:	d9f9      	bls.n	80008f4 <wait_ms+0x14>
	for(i=0;i<x;i++)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	429a      	cmp	r2, r3
 800090c:	d3ef      	bcc.n	80008ee <wait_ms+0xe>
	}
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <main>:
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
	clock_init();
 800091e:	f7ff ff6d 	bl	80007fc <clock_init>
	LCD_INIT();
 8000922:	f7ff fe35 	bl	8000590 <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_string("Hello");
 8000926:	482e      	ldr	r0, [pc, #184]	; (80009e0 <main+0xc8>)
 8000928:	f7ff ff3c 	bl	80007a4 <LCD_WRITE_string>
	wait_ms(30);
 800092c:	201e      	movs	r0, #30
 800092e:	f7ff ffd7 	bl	80008e0 <wait_ms>
	LCD_clear_screen();
 8000932:	f7ff fe25 	bl	8000580 <LCD_clear_screen>
	GPIO_init();
 8000936:	f7ff ff75 	bl	8000824 <GPIO_init>
	unsigned char Seg_DISPLAY [] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 800093a:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <main+0xcc>)
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	ca07      	ldmia	r2, {r0, r1, r2}
 8000942:	c303      	stmia	r3!, {r0, r1}
 8000944:	801a      	strh	r2, [r3, #0]
 8000946:	3302      	adds	r3, #2
 8000948:	0c12      	lsrs	r2, r2, #16
 800094a:	701a      	strb	r2, [r3, #0]
	unsigned char LCD_DISPLAY [] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <main+0xd0>)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	c303      	stmia	r3!, {r0, r1}
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	0c12      	lsrs	r2, r2, #16
 800095a:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
 8000960:	e01b      	b.n	800099a <main+0x82>
	{
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000962:	7ffb      	ldrb	r3, [r7, #31]
 8000964:	f107 0220 	add.w	r2, r7, #32
 8000968:	4413      	add	r3, r2
 800096a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fef4 	bl	800075c <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, Seg_DISPLAY[i] << 9); /* write data on to the LED port */
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	f107 0220 	add.w	r2, r7, #32
 800097a:	4413      	add	r3, r2
 800097c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000980:	b29b      	uxth	r3, r3
 8000982:	025b      	lsls	r3, r3, #9
 8000984:	b29b      	uxth	r3, r3
 8000986:	4619      	mov	r1, r3
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <main+0xd4>)
 800098a:	f000 f966 	bl	8000c5a <MCAL_GPIO_WritePort>
		wait_ms(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f7ff ffa6 	bl	80008e0 <wait_ms>
	for (unsigned char i = 0; i < 11; i++)
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	3301      	adds	r3, #1
 8000998:	77fb      	strb	r3, [r7, #31]
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	2b0a      	cmp	r3, #10
 800099e:	d9e0      	bls.n	8000962 <main+0x4a>
		/* wait for 1 second */
	}
	LCD_clear_screen();
 80009a0:	f7ff fdee 	bl	8000580 <LCD_clear_screen>
	KEYBAD_INIT();
 80009a4:	f7ff fbe4 	bl	8000170 <KEYBAD_INIT>
	LCD_WRITE_string("Keypad is ready");
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <main+0xd8>)
 80009aa:	f7ff fefb 	bl	80007a4 <LCD_WRITE_string>
	wait_ms(30);
 80009ae:	201e      	movs	r0, #30
 80009b0:	f7ff ff96 	bl	80008e0 <wait_ms>
	LCD_clear_screen();
 80009b4:	f7ff fde4 	bl	8000580 <LCD_clear_screen>
	while(1)
	{
		key_pressed = KEYPAD_GETCHAR();
 80009b8:	f7ff fc50 	bl	800025c <KEYPAD_GETCHAR>
 80009bc:	4603      	mov	r3, r0
 80009be:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed)
 80009c0:	7fbb      	ldrb	r3, [r7, #30]
 80009c2:	2b3f      	cmp	r3, #63	; 0x3f
 80009c4:	d002      	beq.n	80009cc <main+0xb4>
 80009c6:	2b41      	cmp	r3, #65	; 0x41
 80009c8:	d008      	beq.n	80009dc <main+0xc4>
 80009ca:	e002      	b.n	80009d2 <main+0xba>
		{
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 80009cc:	f7ff fdd8 	bl	8000580 <LCD_clear_screen>
			break;
 80009d0:	e005      	b.n	80009de <main+0xc6>
		default:
			LCD_WRITE_CHAR(key_pressed);
 80009d2:	7fbb      	ldrb	r3, [r7, #30]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fec1 	bl	800075c <LCD_WRITE_CHAR>
			break;
 80009da:	e000      	b.n	80009de <main+0xc6>
			break;
 80009dc:	bf00      	nop
		key_pressed = KEYPAD_GETCHAR();
 80009de:	e7eb      	b.n	80009b8 <main+0xa0>
 80009e0:	08000cd8 	.word	0x08000cd8
 80009e4:	08000cf0 	.word	0x08000cf0
 80009e8:	08000cfc 	.word	0x08000cfc
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	08000ce0 	.word	0x08000ce0

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a22:	f000 f929 	bl	8000c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff ff77 	bl	8000918 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a38:	08000d10 	.word	0x08000d10
  ldr r2, =_sbss
 8000a3c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a40:	20000040 	.word	0x20000040

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>

08000a46 <GetPosition_CRLH>:


#include "stm32_f103c6_GPIO_driver.h"

uint8_t GetPosition_CRLH(uint16_t PinNumber)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	2b80      	cmp	r3, #128	; 0x80
 8000a54:	d042      	beq.n	8000adc <GetPosition_CRLH+0x96>
 8000a56:	2b80      	cmp	r3, #128	; 0x80
 8000a58:	dc11      	bgt.n	8000a7e <GetPosition_CRLH+0x38>
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d036      	beq.n	8000acc <GetPosition_CRLH+0x86>
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	dc06      	bgt.n	8000a70 <GetPosition_CRLH+0x2a>
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d02e      	beq.n	8000ac4 <GetPosition_CRLH+0x7e>
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d02e      	beq.n	8000ac8 <GetPosition_CRLH+0x82>
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d028      	beq.n	8000ac0 <GetPosition_CRLH+0x7a>
 8000a6e:	e037      	b.n	8000ae0 <GetPosition_CRLH+0x9a>
 8000a70:	2b20      	cmp	r3, #32
 8000a72:	d02f      	beq.n	8000ad4 <GetPosition_CRLH+0x8e>
 8000a74:	2b40      	cmp	r3, #64	; 0x40
 8000a76:	d02f      	beq.n	8000ad8 <GetPosition_CRLH+0x92>
 8000a78:	2b10      	cmp	r3, #16
 8000a7a:	d029      	beq.n	8000ad0 <GetPosition_CRLH+0x8a>
 8000a7c:	e030      	b.n	8000ae0 <GetPosition_CRLH+0x9a>
 8000a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a82:	d023      	beq.n	8000acc <GetPosition_CRLH+0x86>
 8000a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a88:	dc09      	bgt.n	8000a9e <GetPosition_CRLH+0x58>
 8000a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a8e:	d019      	beq.n	8000ac4 <GetPosition_CRLH+0x7e>
 8000a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a94:	d018      	beq.n	8000ac8 <GetPosition_CRLH+0x82>
 8000a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9a:	d011      	beq.n	8000ac0 <GetPosition_CRLH+0x7a>
 8000a9c:	e020      	b.n	8000ae0 <GetPosition_CRLH+0x9a>
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa2:	d017      	beq.n	8000ad4 <GetPosition_CRLH+0x8e>
 8000aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa8:	dc03      	bgt.n	8000ab2 <GetPosition_CRLH+0x6c>
 8000aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aae:	d00f      	beq.n	8000ad0 <GetPosition_CRLH+0x8a>
 8000ab0:	e016      	b.n	8000ae0 <GetPosition_CRLH+0x9a>
 8000ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ab6:	d00f      	beq.n	8000ad8 <GetPosition_CRLH+0x92>
 8000ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000abc:	d00e      	beq.n	8000adc <GetPosition_CRLH+0x96>
 8000abe:	e00f      	b.n	8000ae0 <GetPosition_CRLH+0x9a>
	{
	case GPIO_PIN_0  :
	case GPIO_PIN_8  :
		return 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e00e      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_1  :
	case GPIO_PIN_9  :
		return 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e00c      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_2  :
	case GPIO_PIN_10 :
		return 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	e00a      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_3  :
	case GPIO_PIN_11 :
		return 12;
 8000acc:	230c      	movs	r3, #12
 8000ace:	e008      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_4  :
	case GPIO_PIN_12 :
		return 16;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	e006      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_5  :
	case GPIO_PIN_13 :
		return 20;
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	e004      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_6  :
	case GPIO_PIN_14 :
		return 24;
 8000ad8:	2318      	movs	r3, #24
 8000ada:	e002      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;
	case GPIO_PIN_7  :
	case GPIO_PIN_15 :
		return 28;
 8000adc:	231c      	movs	r3, #28
 8000ade:	e000      	b.n	8000ae2 <GetPosition_CRLH+0x9c>
		break;

	}
	return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <MCAL_GPIO_Init>:
 * @retval        -none
 * Note           -stm32F103c6 MCU has GPIO A,B,C,D,E Modules
                  But LQFP48 Package has only GPIO A,B,PART of C,D exported as external PINS from MCu.
 */
void MCAL_GPIO_Init(GPIO_Typedef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configures pins(0:7)
	//Port configuration register high (GPIOx_CRH) configures pins(0:15)
	volatile uint8_t* configRegister = NULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig ->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	d801      	bhi.n	8000b0a <MCAL_GPIO_Init+0x1e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <MCAL_GPIO_Init+0x22>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xF << GetPosition_CRLH(PinConfig->GPIO_PinNumber));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff96 	bl	8000a46 <GetPosition_CRLH>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	230f      	movs	r3, #15
 8000b20:	4093      	lsls	r3, r2
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	b25a      	sxtb	r2, r3
 8000b2c:	b24b      	sxtb	r3, r1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	701a      	strb	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_mode_OUTPUT_PP))
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	d00b      	beq.n	8000b58 <MCAL_GPIO_Init+0x6c>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d007      	beq.n	8000b58 <MCAL_GPIO_Init+0x6c>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d003      	beq.n	8000b58 <MCAL_GPIO_Init+0x6c>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d10e      	bne.n	8000b76 <MCAL_GPIO_Init+0x8a>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( ( ( (PinConfig->GPIO_Mode -4) <<2) | (PinConfig->GPIO_Output_Speed) ) & 0x0f);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	78db      	ldrb	r3, [r3, #3]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e02c      	b.n	8000bd0 <MCAL_GPIO_Init+0xe4>

	}
	//if pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if((PinConfig->GPIO_Mode == GPIO_mode_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_mode_Analog) )
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d003      	beq.n	8000b86 <MCAL_GPIO_Init+0x9a>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d107      	bne.n	8000b96 <MCAL_GPIO_Init+0xaa>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (PinConfig->GPIO_Mode) <<2) | 0x0 ) & 0x0f);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e01c      	b.n	8000bd0 <MCAL_GPIO_Init+0xe4>

		}
		else if(PinConfig->GPIO_Mode == GPIO_mode_INPUT_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b08      	cmp	r3, #8
 8000b9c:	d102      	bne.n	8000ba4 <MCAL_GPIO_Init+0xb8>
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_FLO) <<2) | 0x0 ) & 0x0f); //consider it as input floating
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e015      	b.n	8000bd0 <MCAL_GPIO_Init+0xe4>
		}
		else //PU PD input
		{
			//set CNF8[1:0] MODE8[1:0]
			PIN_Config =  ( ( ( (GPIO_mode_INPUT_PU) <<2) | 0x0 ) & 0x0f);
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	73fb      	strb	r3, [r7, #15]
			if ( PinConfig->GPIO_Mode == GPIO_mode_INPUT_PU)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d107      	bne.n	8000bc0 <MCAL_GPIO_Init+0xd4>
			{
				//Table 20. Port bit configuration table ( PxODR register = 1)
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	e007      	b.n	8000bd0 <MCAL_GPIO_Init+0xe4>
			}
			else
			{
				//Table 20. Port bit configuration table ( PxODR register = 0)
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]
		}


	}
    //write on CRL OR CRH
	(*configRegister) |= ( (PIN_Config) << GetPosition_CRLH(PinConfig->GPIO_PinNumber) );
 8000bd0:	7bfc      	ldrb	r4, [r7, #15]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff35 	bl	8000a46 <GetPosition_CRLH>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	fa04 f103 	lsl.w	r1, r4, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	b24b      	sxtb	r3, r1
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	701a      	strb	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}

08000bfe <MCAL_GPIO_ReadPin>:
 * @param [in]    -PinNumber: set pin Number according @ref GPIO_PINS_define
 * @retval        -the input pin value (two values based on @ref GPIO_PIN_state)
 * Note           -none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOx,uint16_t PinNumber)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	807b      	strh	r3, [r7, #2]
  uint8_t bitStatus;
  if(((GPIOx->IDR) & PinNumber) != (uint32_t) GPIO_PIN_RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <MCAL_GPIO_ReadPin+0x1e>
  {
	  bitStatus = GPIO_PIN_SET;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <MCAL_GPIO_ReadPin+0x22>
  }
  else
  {
	  bitStatus = GPIO_PIN_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }
  return bitStatus;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <MCAL_GPIO_WritePin>:
 * @param [in]    -value: pin value
 * @retval        -none
 * Note           -none
 */
void MCAL_GPIO_WritePin(GPIO_Typedef *GPIOx,uint16_t PinNumber,uint8_t value)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]

	  if(value !=  GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <MCAL_GPIO_WritePin+0x1e>
//		  Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		  These bits are write-only and can be accessed in Word mode only.
//		  0: No action on the corresponding ODRx bit
//	      1: Set the corresponding ODRx bit

		  GPIOx->BSRR = (uint32_t) PinNumber;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
//		  0: No action on the corresponding ODRx bit
//		  1: Reset the corresponding ODRx bit
//		  Note: If both BSx and BRx are set, BSx has priority
		  GPIOx->BRR = (uint32_t) PinNumber;
	  }
}
 8000c48:	e002      	b.n	8000c50 <MCAL_GPIO_WritePin+0x24>
		  GPIOx->BRR = (uint32_t) PinNumber;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	615a      	str	r2, [r3, #20]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <MCAL_GPIO_WritePort>:
 * @param [in]    -value: port value
 * @retval        -none
 * Note           -none
 */
void MCAL_GPIO_WritePort(GPIO_Typedef *GPIOx,uint16_t value)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
   GPIOx->ODR =(uint32_t)value;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <__libc_init_array>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	4e0c      	ldr	r6, [pc, #48]	; (8000cb0 <__libc_init_array+0x38>)
 8000c7e:	4c0d      	ldr	r4, [pc, #52]	; (8000cb4 <__libc_init_array+0x3c>)
 8000c80:	1ba4      	subs	r4, r4, r6
 8000c82:	10a4      	asrs	r4, r4, #2
 8000c84:	42a5      	cmp	r5, r4
 8000c86:	d109      	bne.n	8000c9c <__libc_init_array+0x24>
 8000c88:	f000 f81a 	bl	8000cc0 <_init>
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	4e0a      	ldr	r6, [pc, #40]	; (8000cb8 <__libc_init_array+0x40>)
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <__libc_init_array+0x44>)
 8000c92:	1ba4      	subs	r4, r4, r6
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	d105      	bne.n	8000ca6 <__libc_init_array+0x2e>
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca0:	4798      	blx	r3
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	e7ee      	b.n	8000c84 <__libc_init_array+0xc>
 8000ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000caa:	4798      	blx	r3
 8000cac:	3501      	adds	r5, #1
 8000cae:	e7f2      	b.n	8000c96 <__libc_init_array+0x1e>
 8000cb0:	08000d08 	.word	0x08000d08
 8000cb4:	08000d08 	.word	0x08000d08
 8000cb8:	08000d08 	.word	0x08000d08
 8000cbc:	08000d0c 	.word	0x08000d0c

08000cc0 <_init>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr

08000ccc <_fini>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr
