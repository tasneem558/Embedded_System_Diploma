/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32_f103x6.h"
#include "stm32_f103c6_GPIO_driver.h"
#include "keypad.h"
#include "lcd.h"

void clock_init(void)
{
	//enable clock GPOIA
	RCC_GPIOA_CLK_EN();
	//enable clock GPOIB
	RCC_GPIOB_CLK_EN();
}

void GPIO_init()
{
	GPIO_PinConfig_t PinCfg;
  //PA1 floating input:
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
    PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
    MCAL_GPIO_Init(GPIOA,&PinCfg);

  //PB1 output push-pull mode:
    PinCfg.GPIO_PinNumber = GPIO_PIN_1;
    PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
    PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
    MCAL_GPIO_Init(GPIOB, &PinCfg);

    //PA13 floating input:
   	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
    PinCfg.GPIO_Mode = GPIO_mode_INPUT_FLO;
    MCAL_GPIO_Init(GPIOA, &PinCfg);

    //PB13 output push-pull mode:
    PinCfg.GPIO_PinNumber = GPIO_PIN_13;
    PinCfg.GPIO_Mode = GPIO_mode_OUTPUT_PP;
    PinCfg.GPIO_Output_Speed = GPIO_speed_OUTPUT_10M;
    MCAL_GPIO_Init(GPIOB,&PinCfg);

}
void wait(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
	{
		for(j=0;j<1000;j++);
	}
}
int main(void)
{
	clock_init();
	GPIO_init();
	while(1)
	{
		//PA1 connected external PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)
		{
			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0); //single pressing
		}

		//PA13 connected external PDR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1)
		{
			MCAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13); //multi pressing
		}
        wait(1);
	}
}


